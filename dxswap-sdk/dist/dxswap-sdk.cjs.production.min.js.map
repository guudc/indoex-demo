{"version":3,"file":"dxswap-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/utils.ts","../src/errors.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/routable-platform.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/fractions/priced-token-amount.ts","../src/entities/liquidity-mining-campaign.ts","../src/entities/priced-token.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\nimport PERMISSIVE_MULTICALL_ABI from './abis/PermissiveMulticall.json'\nimport STAKING_REWARDS_FACTORY_ABI from './abis/staking-rewards-distribution-factory.json'\nimport STAKING_REWARDS_DISTRIBUTION_ABI from './abis/staking-rewards-distribution.json'\nimport TOKEN_REGISTRY_ABI from './abis/token-registry.json'\nimport {\n  rinkeby as coreRinkeby,\n  ropsten as coreRopsten,\n  mumbaiTestnet as coreMumbaiTestnet,\n  bscTestnet as coreBscTestnet,\n  mainnet as coreMainnet,\n  arbitrumTestnetV3 as coreArbitrumTestnetV3,\n  sokol as coreSokol,\n  xdai as coreXDai,\n  matic as coreMatic\n} from 'dxswap-core/.contracts.json'\nimport {\n  rinkeby as peripheryRinkeby,\n  mumbaiTestnet as peripheryMumbaiTestnet,\n  bscTestnet as peripheryBscTestnet,\n  ropsten as peripheryRopsten,\n  mainnet as peripheryMainnet,\n  arbitrumTestnetV3 as peripheryArbitrumTestnetV3,\n  sokol as peripherySokol,\n  xdai as peripheryXDai,\n  matic as peripheryMatic\n} from 'dxswap-periphery/.contracts.json'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  RINKEBY = 4,\n  ROPSTEN = 3,\n  MUMBAI_TESTNET = 80001,\n  BSC_TESTNET = 97,\n  ARBITRUM_TESTNET_V3 = 79377087078960,\n  SOKOL = 77,\n  XDAI = 100,\n  MATIC = 137\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nexport const FACTORY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: coreMainnet.factory,\n  [ChainId.RINKEBY]: coreRinkeby.factory,\n  [ChainId.MUMBAI_TESTNET]: coreMumbaiTestnet.factory,\n  [ChainId.ROPSTEN]: coreRopsten.factory,\n  [ChainId.BSC_TESTNET]: coreBscTestnet.factory,\n  [ChainId.ARBITRUM_TESTNET_V3]: coreArbitrumTestnetV3.factory,\n  [ChainId.SOKOL]: coreSokol.factory,\n  [ChainId.XDAI]: coreXDai.factory,\n  [ChainId.MATIC]: coreMatic.factory\n}\n\nexport const ROUTER_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.RINKEBY]: peripheryRinkeby.router,\n  [ChainId.MUMBAI_TESTNET]: peripheryMumbaiTestnet.router,\n  [ChainId.BSC_TESTNET]: peripheryBscTestnet.router,\n  [ChainId.ROPSTEN]: peripheryRopsten.router,\n  [ChainId.MAINNET]: peripheryMainnet.router,\n  [ChainId.ARBITRUM_TESTNET_V3]: peripheryArbitrumTestnetV3.router,\n  [ChainId.SOKOL]: peripherySokol.router,\n  [ChainId.XDAI]: peripheryXDai.router,\n  [ChainId.MATIC]: peripheryMatic.router\n}\n\nexport const STAKING_REWARDS_FACTORY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x0000000000000000000000000000000000001234',\n  [ChainId.RINKEBY]: '0xDcA39454f0B83c6f0807708b0E6a620dd9BA6808',\n  [ChainId.ARBITRUM_TESTNET_V3]: '0xB95Ad562EDE8DD78BBFC287fA18150e802b09D9F',\n  [ChainId.SOKOL]: '0xD436e756Cf41318ADeC62E8dCbEF2608753Ae068',\n  [ChainId.XDAI]: '0xCD2A45F36464FdB1065160e03A2353996Ea8Ff57',\n  [ChainId.MATIC]: '0x0000000000000000000000000000000000001234'\n}\n\nexport const TOKEN_REGISTRY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x93DB90445B76329e9ed96ECd74e76D8fbf2590d8',\n  [ChainId.RINKEBY]: '0x815d1b18f6baaeb3853b0f637475a5c2b28e2253',\n  [ChainId.ARBITRUM_TESTNET_V3]: '0x9d6f6d86b81289e40e07fcda805c06f6e9b8f629',\n  [ChainId.SOKOL]: '0x681c3836a5589b933062ACA4fd846c1287a2865F',\n  [ChainId.XDAI]: '0x85E001DfFF16F388Bc32Cd18009ceDF8F9b62C9E',\n  [ChainId.MATIC]: '0x0000000000000000000000000000000000001234'\n}\n\nexport const DXSWAP_TOKEN_LIST_ID: { [chainId: number]: number } = {\n  [ChainId.MAINNET]: 1,\n  [ChainId.RINKEBY]: 1,\n  [ChainId.ARBITRUM_TESTNET_V3]: 1,\n  [ChainId.SOKOL]: 1,\n  [ChainId.XDAI]: 5,\n  [ChainId.MATIC]: 137\n}\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0xd306a548755b9295ee49cc729e13ca4a45e00199bbd890fa146da43a50571776', // Swapr\n  [ChainId.RINKEBY]: '0xd306a548755b9295ee49cc729e13ca4a45e00199bbd890fa146da43a50571776', // Swapr\n  [ChainId.ARBITRUM_TESTNET_V3]: '0xd306a548755b9295ee49cc729e13ca4a45e00199bbd890fa146da43a50571776', // Swapr\n  [ChainId.SOKOL]: '0xd306a548755b9295ee49cc729e13ca4a45e00199bbd890fa146da43a50571776', // Swapr\n  [ChainId.XDAI]: '0x3f88503e8580ab941773b59034fb4b2a63e86dbc031b3633a925533ad3ed2b93', // Honeyswap\n  [ChainId.MATIC]: '0xae81bbc68f315fbbf7617eb881349af83b1e95241f616966e1e0583ecd0793fe' // Honeyswap\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _25 = JSBI.BigInt(25)\nexport const SECONDS_IN_YEAR = JSBI.BigInt(31536000)\nexport const _30 = JSBI.BigInt(30)\nexport const _100 = JSBI.BigInt(100)\nexport const _1000 = JSBI.BigInt(1000)\nexport const _10000 = JSBI.BigInt(10000)\n\nexport const defaultSwapFee = _25\nexport const defaultProtocolFeeDenominator = FIVE\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nconst PERMISSIVE_MULTICALL_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x0946f567d0ed891e6566c1da8e5093517f43571d',\n  [ChainId.RINKEBY]: '0x798d8ced4dff8f054a5153762187e84751a73344',\n  [ChainId.ARBITRUM_TESTNET_V3]: '0x73a08DC74eF4ed2c360199244bb69F1464204E7C',\n  [ChainId.SOKOL]: '0x4D97Bd8eFaCf46b33c4438Ed0B7B6AABfa2359FB',\n  [ChainId.XDAI]: '0x4E75068ED2338fCa56631E740B0723A6dbc1d5CD',\n  [ChainId.MATIC]: '0x95028E5B8a734bb7E2071F96De89BABe75be9C8E'\n}\n\nexport {\n  PERMISSIVE_MULTICALL_ABI,\n  TOKEN_REGISTRY_ABI,\n  PERMISSIVE_MULTICALL_ADDRESS,\n  STAKING_REWARDS_FACTORY_ABI,\n  STAKING_REWARDS_DISTRIBUTION_ABI\n}\n","import invariant from 'tiny-invariant'\n// import warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    // warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { ChainId, SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on the target chain.\n *\n * The only instances of the base class `Currency` are native currencies such as Ether for Ethereum,\n * SPOA for the Sokol testnet and xDAI for xDAI.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  // fiat currencies used to represent countervalues\n  public static readonly USD: Currency = new Currency(18, 'USD', 'US dollar')\n\n  // Native currencies for deployment chains\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n  public static readonly SPOA: Currency = new Currency(18, 'SPOA', 'Sokol POA')\n  public static readonly XDAI: Currency = new Currency(18, 'XDAI', 'xDAI')\n  public static readonly MATIC: Currency = new Currency(18, 'MATIC', 'MATIC')\n\n  private static readonly NATIVE_CURRENCY: { [chainId in ChainId]: Currency } = {\n    [ChainId.MAINNET]: Currency.ETHER,\n    [ChainId.RINKEBY]: Currency.ETHER,\n    [ChainId.ARBITRUM_TESTNET_V3]: Currency.ETHER,\n    [ChainId.SOKOL]: Currency.SPOA,\n    [ChainId.XDAI]: Currency.XDAI,\n    [ChainId.MATIC]: Currency.MATIC\n  }\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  public static isNative(currency: Currency): boolean {\n    return Object.values(Currency.NATIVE_CURRENCY).indexOf(currency) >= 0\n  }\n\n  public static getNative(chainId: ChainId): Currency {\n    return Currency.NATIVE_CURRENCY[chainId]\n  }\n}\n\nexport const USD = Currency.USD\n\nexport const ETHER = Currency.ETHER\nexport const SPOA = Currency.SPOA\nexport const XDAI = Currency.XDAI\nexport const MATIC = Currency.MATIC\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public static readonly WETH: { [key: number]: Token } = {\n    [ChainId.MAINNET]: new Token(\n      ChainId.MAINNET,\n      '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.RINKEBY]: new Token(\n      ChainId.RINKEBY,\n      '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.ARBITRUM_TESTNET_V3]: new Token(\n      ChainId.ARBITRUM_TESTNET_V3,\n      '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.SOKOL]: new Token(\n      ChainId.SOKOL,\n      '0xfDc50eF6b67F65Dddc36e56729a9D07BAe1A1f68',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.XDAI]: new Token(\n      ChainId.XDAI,\n      '0x6a023ccd1ff6f2045c3309768ead9e68f978f6e1',\n      18,\n      'WETH',\n      'Wrapped Ether on xDai'\n    ),\n    [ChainId.MATIC]: new Token(\n      ChainId.MATIC,\n      '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n      18,\n      'WETH',\n      'Wrapped Ether on Matic'\n    )\n  }\n\n  public static readonly WSPOA: { [key: number]: Token } = {\n    [ChainId.SOKOL]: new Token(ChainId.SOKOL, '0xc655c6D80ac92d75fBF4F40e95280aEb855B1E87', 18, 'WSPOA', 'Wrapped SPOA')\n  }\n\n  public static readonly WXDAI: { [key: number]: Token } = {\n    [ChainId.XDAI]: new Token(ChainId.XDAI, '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d', 18, 'WXDAI', 'Wrapped xDAI')\n  }\n\n  public static readonly WMATIC: { [key: number]: Token } = {\n    [ChainId.MATIC]: new Token(ChainId.MATIC, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped Matic')\n  }\n\n  public static readonly DXD: { [key: number]: Token } = {\n    [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xa1d65E8fB6e87b60FECCBc582F7f97804B725521', 18, 'DXD', 'DXdao'),\n    [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0x554898A0BF98aB0C03ff86C7DccBE29269cc4d29', 18, 'DXD', 'DXdao'),\n    [ChainId.XDAI]: new Token(\n      ChainId.XDAI,\n      '0xb90d6bec20993be5d72a5ab353343f7a0281f158',\n      18,\n      'DXD',\n      'DXdao from Ethereum'\n    )\n  }\n\n  private static readonly NATIVE_CURRENCY_WRAPPER: { [chainId in ChainId]: Token } = {\n    [ChainId.MAINNET]: Token.WETH[ChainId.MAINNET],\n    [ChainId.RINKEBY]: Token.WETH[ChainId.RINKEBY],\n    [ChainId.ARBITRUM_TESTNET_V3]: Token.WETH[ChainId.ARBITRUM_TESTNET_V3],\n    [ChainId.SOKOL]: Token.WSPOA[ChainId.SOKOL],\n    [ChainId.XDAI]: Token.WXDAI[ChainId.XDAI],\n    [ChainId.MATIC]: Token.WMATIC[ChainId.MATIC]\n  }\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  public static getNativeWrapper(chainId: ChainId): Token {\n    return Token.NATIVE_CURRENCY_WRAPPER[chainId]\n  }\n\n  public static isNativeWrapper(token: Token): boolean {\n    return Token.NATIVE_CURRENCY_WRAPPER[token.chainId].equals(token)\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\n// reexport for convenience\nexport const WETH = Token.WETH\nexport const WSPOA = Token.WSPOA\nexport const DXD = Token.DXD\nexport const WXDAI = Token.WXDAI\nexport const WMATIC = Token.WMATIC\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, USD } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static nativeCurrency(amount: BigintIsh, chainId: number): CurrencyAmount {\n    const nativeCurrency = Currency.getNative(chainId)\n    invariant(!!nativeCurrency, 'NO_NATIVE_CURRENCY')\n    return new CurrencyAmount(nativeCurrency, amount)\n  }\n\n  /**\n   * Helper that calls the constructor with the USD currency\n   * @param amount amount of usd experessed in wei (with 18 decimals resolution)\n   */\n  public static usd(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(USD, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, ChainId, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.nativeCurrency(super.multiply(currencyAmount.raw).quotient, ChainId.MAINNET)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { BigintIsh, ChainId, FACTORY_ADDRESS, INIT_CODE_HASH, ROUTER_ADDRESS, _30 } from '../constants'\n\nconst UNISWAP_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nconst SUSHISWAP_FACTORY_ADDRESS = '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac'\nconst SUSHISWAP_MATIC_FACTORY_ADDRESS = '0xc35DADB65012eC5796536bD9864eD8773aBc74C4'\nconst SWAPR_FACTORY_ADDRESS = '0x5D48C95AdfFD4B40c1AAADc4e08fc44117E02179'\nconst BAOSWAP_FACTORY_ADDRESS = '0x45de240fbe2077dd3e711299538a09854fae9c9b'\nconst QUICKSWAP_FACTORY_ADDRESS = '0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32'\nconst SUSHISWAP_XDAI_FACTORY_ADDRESS = '0xc35DADB65012eC5796536bD9864eD8773aBc74C4'\n\nconst UNISWAP_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nconst SUSHISWAP_ROUTER_ADDRESS = '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F'\nconst SUSHISWAP_MATIC_ROUTER_ADDRESS = '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506'\nconst SWAPR_ROUTER_ADDRESS = '0xE43e60736b1cb4a75ad25240E2f9a62Bff65c0C0'\nconst BAOSWAP_ROUTER_ADDRESS = '0x6093AeBAC87d62b1A5a4cEec91204e35020E38bE'\nconst QUICKSWAP_ROUTER_ADDRESS = '0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff'\nconst SUSHISWAP_XDAI_ROUTER_ADDRESS = '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506'\n\n\n/**\n * A platform to which Swapr can route through.\n */\nexport class RoutablePlatform {\n  public readonly name: string\n  public readonly factoryAddress: { [supportedChainId in ChainId]?: string }\n  public readonly routerAddress: { [supportedChainId in ChainId]?: string }\n  public readonly initCodeHash : { [supportedChainId in ChainId]?: string }\n  public readonly defaultSwapFee: BigintIsh\n\n  public static readonly HONEYSWAP = new RoutablePlatform(\n    'Honeyswap',\n    FACTORY_ADDRESS,\n    ROUTER_ADDRESS,\n    INIT_CODE_HASH,\n    _30\n  )\n  public static readonly UNISWAP = new RoutablePlatform(\n    'Uniswap',\n    { [ChainId.MAINNET]: UNISWAP_FACTORY_ADDRESS, [ChainId.RINKEBY]: UNISWAP_FACTORY_ADDRESS },\n    { [ChainId.MAINNET]: UNISWAP_ROUTER_ADDRESS, [ChainId.RINKEBY]: UNISWAP_ROUTER_ADDRESS },\n    { [ChainId.MAINNET]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' },\n    _30\n  )\n  public static readonly SUSHISWAP = new RoutablePlatform(\n    'Sushiswap',\n    { \n      [ChainId.MAINNET]: SUSHISWAP_FACTORY_ADDRESS, \n      [ChainId.RINKEBY]: SUSHISWAP_FACTORY_ADDRESS, \n      [ChainId.MATIC]: SUSHISWAP_MATIC_FACTORY_ADDRESS,\n      [ChainId.XDAI]: SUSHISWAP_XDAI_FACTORY_ADDRESS \n    },\n    { \n      [ChainId.MAINNET]: SUSHISWAP_ROUTER_ADDRESS, \n      [ChainId.RINKEBY]: SUSHISWAP_ROUTER_ADDRESS, \n      [ChainId.MATIC]: SUSHISWAP_MATIC_ROUTER_ADDRESS,\n      [ChainId.XDAI]: SUSHISWAP_XDAI_ROUTER_ADDRESS \n    },\n    { \n      [ChainId.MAINNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n      [ChainId.MATIC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n      [ChainId.XDAI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\n    },\n    _30\n  )\n  public static readonly SWAPR = new RoutablePlatform(\n    'Swapr',\n    { [ChainId.XDAI]: SWAPR_FACTORY_ADDRESS },\n    { [ChainId.XDAI]: SWAPR_ROUTER_ADDRESS },\n    { [ChainId.XDAI]: '0xd306a548755b9295ee49cc729e13ca4a45e00199bbd890fa146da43a50571776' },\n    _30\n  )\n  public static readonly BAOSWAP = new RoutablePlatform(\n    'Baoswap',\n    { [ChainId.XDAI]: BAOSWAP_FACTORY_ADDRESS },\n    { [ChainId.XDAI]: BAOSWAP_ROUTER_ADDRESS },\n    { [ChainId.XDAI]: '0x0bae3ead48c325ce433426d2e8e6b07dac10835baec21e163760682ea3d3520d' },\n    _30\n  )\n  public static readonly QUICKSWAP = new RoutablePlatform(\n    'Quickswap',\n    { [ChainId.MATIC]: QUICKSWAP_FACTORY_ADDRESS },\n    { [ChainId.MATIC]: QUICKSWAP_ROUTER_ADDRESS },\n    { [ChainId.MATIC]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' },\n    _30\n  )\n\n  public constructor(\n    name: string,\n    factoryAddress: { [supportedChainId in ChainId]?: string },\n    routerAddress: { [supportedChainId in ChainId]?: string },\n    initCodeHash: { [supportedChainId in ChainId]?: string },\n    defaultSwapFee: BigintIsh\n  ) {\n    this.name = name\n    this.factoryAddress = factoryAddress\n    this.routerAddress = routerAddress\n    this.initCodeHash = initCodeHash\n    this.defaultSwapFee = defaultSwapFee\n  }\n\n  public supportsChain(chainId: ChainId): boolean {\n    return !!this.factoryAddress[chainId]\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  _30,\n  _10000,\n  defaultSwapFee,\n  defaultProtocolFeeDenominator\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { ChainId } from '../constants'\nimport { RoutablePlatform } from './routable-platform'\nimport { LiquidityMiningCampaign } from './liquidity-mining-campaign'\n\nconst INITIAL_CACHE_STATE = {\n  [ChainId.MAINNET]: {},\n  [ChainId.RINKEBY]: {},\n  [ChainId.ARBITRUM_TESTNET_V3]: {},\n  [ChainId.SOKOL]: {},\n  [ChainId.XDAI]: {},\n  [ChainId.MATIC]: {}\n}\n\nlet PAIR_ADDRESS_CACHE: {\n  [supportedPlatformName: string]: {\n    [chainId: number]: { [token0Address: string]: { [token1Address: string]: string } }\n  }\n} = {\n  [RoutablePlatform.SWAPR.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.SUSHISWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.UNISWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.HONEYSWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.BAOSWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.QUICKSWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  }\n}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public readonly swapFee: BigintIsh = defaultSwapFee\n  public readonly protocolFeeDenominator: BigintIsh = defaultProtocolFeeDenominator\n  public readonly platform: RoutablePlatform\n  public liquidityMiningCampaigns: LiquidityMiningCampaign[]\n\n  /**\n   * Returns true if the two pairs are equivalent, i.e. have the same address (calculated using create2).\n   * @param other other pair to compare\n   */\n  public equals(other: Pair): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.liquidityToken.address === other.liquidityToken.address\n  }\n\n  public static getAddress(tokenA: Token, tokenB: Token, platform: RoutablePlatform = RoutablePlatform.HONEYSWAP): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    const chainId = tokenA.chainId\n    invariant(platform.supportsChain(chainId), 'INVALID_PLATFORM_CHAIN_ID')\n    if (PAIR_ADDRESS_CACHE?.[platform.name]?.[chainId]?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [platform.name]: {\n          ...PAIR_ADDRESS_CACHE[platform.name],\n          [chainId]: {\n            ...PAIR_ADDRESS_CACHE[platform.name][chainId],\n            [tokens[0].address]: {\n              ...PAIR_ADDRESS_CACHE?.[platform.name]?.[chainId]?.[tokens[0].address],\n              [tokens[1].address]: getCreate2Address(\n                platform.factoryAddress[chainId] as string,\n                keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n                platform.initCodeHash[chainId] as string,\n              )\n            }\n          }\n        }\n      }\n    }\n    return PAIR_ADDRESS_CACHE[platform.name][chainId][tokens[0].address][tokens[1].address]\n  }\n\n  constructor(\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount,\n    swapFee?: BigintIsh,\n    protocolFeeDenominator?: BigintIsh,\n    platform: RoutablePlatform = RoutablePlatform.HONEYSWAP,\n    liquidityMiningCampaigns: LiquidityMiningCampaign[] = []\n  ) {\n    invariant(tokenAmountA.token.chainId === tokenAmountB.token.chainId, 'CHAIN_ID')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n\n    this.platform = platform ? platform : RoutablePlatform.HONEYSWAP\n    const liquidityTokenAddress = Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, platform)\n    this.liquidityToken = new Token(tokenAmounts[0].token.chainId, liquidityTokenAddress, 18, 'HNS', 'HoneySwap')\n    this.protocolFeeDenominator = protocolFeeDenominator ? protocolFeeDenominator : defaultProtocolFeeDenominator\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    this.swapFee = swapFee ? swapFee : platform.defaultSwapFee\n    this.liquidityMiningCampaigns = liquidityMiningCampaigns\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, JSBI.subtract(_10000, parseBigintIsh(this.swapFee)))\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _10000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [\n      outputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.swapFee,\n        this.protocolFeeDenominator\n      )\n    ]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _10000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.raw, outputAmount.raw),\n      JSBI.subtract(_10000, parseBigintIsh(this.swapFee))\n    )\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.swapFee,\n        this.protocolFeeDenominator\n      )\n    ]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, parseBigintIsh(this.protocolFeeDenominator)), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency } from './currency'\nimport { Token } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      pairs.every(pair => pair.platform === pairs[0].platform),\n      'PLATFORM'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (Currency.isNative(input) && pairs[0].involvesToken(Token.getNativeWrapper(pairs[0].chainId))),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (Currency.isNative(output) && pairs[pairs.length - 1].involvesToken(Token.getNativeWrapper(pairs[0].chainId))),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : Token.getNativeWrapper(pairs[0].chainId)]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { RoutablePlatform } from './routable-platform'\nimport { Route } from './route'\nimport { currencyEquals, Token } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (Currency.isNative(currencyAmount.currency))\n    return new TokenAmount(Token.getNativeWrapper(chainId), currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (Currency.isNative(currency)) return Token.getNativeWrapper(chainId)\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n  /**\n   * The unique identifier of the chain on which the swap is being performed (used to correctly handle the native currency).\n   */\n  public readonly chainId: ChainId\n  /**\n   * The swap platform this trade will execute on\n   */\n  public readonly platform: RoutablePlatform\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    this.chainId = route.chainId\n\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : Currency.isNative(route.input)\n        ? CurrencyAmount.nativeCurrency(amounts[0].raw, this.chainId)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : Currency.isNative(route.output)\n        ? CurrencyAmount.nativeCurrency(amounts[amounts.length - 1].raw, this.chainId)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n    this.platform = this.route.pairs[0].platform\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.nativeCurrency(slippageAdjustedAmountOut, this.chainId)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.nativeCurrency(slippageAdjustedAmountIn, this.chainId)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { BigintIsh } from '../../constants'\nimport { PricedToken } from '../priced-token'\nimport { CurrencyAmount } from './currencyAmount'\nimport { TokenAmount } from './tokenAmount'\nimport { utils } from 'ethers'\n\nexport class PricedTokenAmount extends TokenAmount {\n  public readonly token: PricedToken\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: PricedToken, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public get nativeCurrencyAmount(): CurrencyAmount {\n    return new CurrencyAmount(\n      this.token.price.quoteCurrency,\n      utils\n        .parseUnits(\n          this.multiply(this.token.price).toFixed(this.token.price.quoteCurrency.decimals),\n          this.token.price.quoteCurrency.decimals\n        )\n        .toString()\n    )\n  }\n}\n","import { BigintIsh, ChainId, SECONDS_IN_YEAR } from '../constants'\nimport JSBI from 'jsbi'\nimport { parseBigintIsh } from '../utils'\nimport { CurrencyAmount, Fraction, Percent, TokenAmount } from './fractions'\nimport { PricedTokenAmount } from './fractions/priced-token-amount'\nimport { Pair } from './pair'\nimport invariant from 'tiny-invariant'\nimport { utils } from 'ethers'\nimport { Token } from './token'\n\n// this value is used as a floor to calculate apy, in order to avoid infinite results\nconst MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY: { [chainId in ChainId]: CurrencyAmount } = {\n  [ChainId.RINKEBY]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.05', Token.getNative(ChainId.RINKEBY).decimals).toString(),\n    ChainId.RINKEBY\n  ),\n  [ChainId.MAINNET]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.1', Token.getNative(ChainId.MAINNET).decimals).toString(),\n    ChainId.MAINNET\n  ),\n  [ChainId.XDAI]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('1000', Token.getNative(ChainId.XDAI).decimals).toString(),\n    ChainId.XDAI\n  ),\n  [ChainId.SOKOL]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('1000', Token.getNative(ChainId.SOKOL).decimals).toString(),\n    ChainId.SOKOL\n  ),\n  [ChainId.ARBITRUM_TESTNET_V3]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.05', Token.getNative(ChainId.ARBITRUM_TESTNET_V3).decimals).toString(),\n    ChainId.ARBITRUM_TESTNET_V3\n  ),\n  [ChainId.MATIC]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('1000', Token.getNative(ChainId.MATIC).decimals).toString(),\n    ChainId.MATIC\n  )\n}\n\nexport class LiquidityMiningCampaign {\n  public readonly chainId: ChainId\n  public readonly address?: string\n  public readonly startsAt: BigintIsh\n  public readonly endsAt: BigintIsh\n  public readonly rewards: PricedTokenAmount[]\n  public readonly targetedPair: Pair\n  public readonly staked: PricedTokenAmount\n  public readonly duration: BigintIsh\n  public readonly locked: boolean\n  public readonly stakingCap: TokenAmount\n\n  constructor(\n    startsAt: BigintIsh,\n    endsAt: BigintIsh,\n    targetedPair: Pair,\n    rewards: PricedTokenAmount[],\n    staked: PricedTokenAmount,\n    locked: boolean,\n    stakingCap: TokenAmount,\n    address?: string\n  ) {\n    invariant(JSBI.lessThan(parseBigintIsh(startsAt), parseBigintIsh(endsAt)), 'INCONSISTENT_DATES')\n    invariant(staked.token.equals(targetedPair.liquidityToken), 'STAKED_LP_TOKEN')\n    for (const reward of rewards) {\n      invariant(staked.token.chainId === reward.token.chainId, 'CHAIN_ID')\n    }\n    this.chainId = staked.token.chainId\n    this.startsAt = startsAt\n    this.endsAt = endsAt\n    this.rewards = rewards\n    this.targetedPair = targetedPair\n    this.staked = staked\n    this.duration = JSBI.subtract(parseBigintIsh(endsAt), parseBigintIsh(startsAt))\n    this.locked = locked\n    this.stakingCap = stakingCap\n    this.address = address\n  }\n\n  public get remainingDistributionPercentage(): Percent {\n    const now = JSBI.BigInt(Math.floor(Date.now() / 1000))\n    const jsbiStartsAt = parseBigintIsh(this.startsAt)\n    const jsbiEndsAt = parseBigintIsh(this.endsAt)\n    if (JSBI.lessThan(now, jsbiStartsAt)) return new Percent('100', '100')\n    if (JSBI.greaterThanOrEqual(now, jsbiEndsAt)) return new Percent('0', '100')\n    return new Percent(JSBI.subtract(jsbiEndsAt, now), this.duration)\n  }\n\n  public get remainingRewards(): PricedTokenAmount[] {\n    const remainingDistributionPercentage = this.remainingDistributionPercentage\n    return this.rewards.map(reward => {\n      return new PricedTokenAmount(reward.token, remainingDistributionPercentage.multiply(reward.raw).toFixed(0))\n    })\n  }\n\n  public get apy(): Percent {\n    const remainingRewards = this.remainingRewards\n\n    let stakedValueNativeCurrency = this.staked.nativeCurrencyAmount\n    if (stakedValueNativeCurrency.lessThan(MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY[this.chainId])) {\n      stakedValueNativeCurrency = MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY[this.chainId]\n    }\n\n    const cumulativeRemainingRewardAmountNativeCurrency = remainingRewards.reduce(\n      (accumulator, remainingRewardAmount) => {\n        return accumulator.add(remainingRewardAmount.nativeCurrencyAmount)\n      },\n      CurrencyAmount.nativeCurrency('0', this.chainId)\n    )\n\n    const yieldInPeriod = cumulativeRemainingRewardAmountNativeCurrency.divide(stakedValueNativeCurrency)\n    const annualizationMultiplier = new Fraction(SECONDS_IN_YEAR.toString(), this.duration.toString())\n    const rawApy = yieldInPeriod.multiply(annualizationMultiplier)\n    return new Percent(rawApy.numerator, rawApy.denominator)\n  }\n\n  public get currentlyActive(): boolean {\n    const now = JSBI.BigInt(Math.floor(Date.now() / 1000))\n    return (\n      JSBI.lessThanOrEqual(parseBigintIsh(this.startsAt), now) && JSBI.greaterThan(parseBigintIsh(this.endsAt), now)\n    )\n  }\n\n  public get ended(): boolean {\n    return JSBI.greaterThan(JSBI.BigInt(Math.floor(Date.now() / 1000)), parseBigintIsh(this.endsAt))\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { Price } from './fractions'\nimport { Token } from './token'\n\n/**\n * Represents an ERC20 token and its price, expressed in any given currency.\n */\nexport class PricedToken extends Token {\n  public readonly price: Price\n\n  constructor(chainId: ChainId, address: string, decimals: number, price: Price, symbol?: string, name?: string) {\n    invariant(price.baseCurrency.symbol === symbol && price.baseCurrency.decimals === decimals, 'TOKEN')\n    super(chainId, address, decimals, symbol, name)\n    this.price = price\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { Currency, CurrencyAmount, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const nativeCurrency = Currency.getNative(trade.chainId)\n    const etherIn = trade.inputAmount.currency === nativeCurrency\n    const etherOut = trade.outputAmount.currency === nativeCurrency\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import JSBI from 'jsbi'\nimport { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider, Provider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IDXswapPair from 'dxswap-core/build/IDXswapPair.json'\nimport IDXswapFactory from 'dxswap-core/build/IDXswapFactory.json'\nimport invariant from 'tiny-invariant'\nimport ERC20Abi from './abis/ERC20.json'\n// import TokenRegistryAbi from './abis/token-registry.json'\nimport {\n  ChainId,\n  BigintIsh,\n  FACTORY_ADDRESS,\n  PERMISSIVE_MULTICALL_ADDRESS,\n  PERMISSIVE_MULTICALL_ABI\n} from './constants'\nimport { Token } from './entities/token'\nimport { Currency } from './entities/currency'\nimport { Interface } from '@ethersproject/abi'\nimport { TokenList, TokenInfo } from './entities/token-list'\nimport { RoutablePlatform } from './entities/routable-platform'\nimport fetch from 'node-fetch'\n\nconst TOKEN_DATA_CACHE: {\n  [chainId: number]: { [address: string]: Currency }\n} = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': { decimals: 9, symbol: 'DGD', name: 'DigixDAO' } // DGD\n  }\n}\n\nconst TOKEN_LOGO_URI_CACHE: {\n  [chainId in ChainId]: { [address: string]: string }\n} = {\n  [ChainId.MAINNET]: {},\n  [ChainId.XDAI]: {},\n  [ChainId.SOKOL]: {},\n  [ChainId.ARBITRUM_TESTNET_V3]: {},\n  [ChainId.RINKEBY]: {},\n  [ChainId.MATIC]: {}\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider: Provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<Token> {\n    let tokenData: Currency\n    if (TOKEN_DATA_CACHE?.[chainId]?.[address]) {\n      tokenData = TOKEN_DATA_CACHE[chainId][address]\n    } else {\n      const multicall = new Contract(PERMISSIVE_MULTICALL_ADDRESS[chainId], PERMISSIVE_MULTICALL_ABI, provider)\n      const erc20Interface = new Contract(address, ERC20Abi, provider).interface\n      const symbolFunction = erc20Interface.getFunction('symbol()')\n      const nameFunction = erc20Interface.getFunction('name()')\n      const decimalsFunction = erc20Interface.getFunction('decimals()')\n      const result = await multicall.aggregate([\n        [address, erc20Interface.encodeFunctionData(symbolFunction)],\n        [address, erc20Interface.encodeFunctionData(nameFunction)],\n        [address, erc20Interface.encodeFunctionData(decimalsFunction)]\n      ])\n      tokenData = {\n        symbol: erc20Interface.decodeFunctionResult(symbolFunction, result.returnData[0])[0],\n        name: erc20Interface.decodeFunctionResult(nameFunction, result.returnData[1])[0],\n        decimals: erc20Interface.decodeFunctionResult(decimalsFunction, result.returnData[2])[0]\n      }\n      TOKEN_DATA_CACHE[chainId][address] = tokenData\n    }\n    return new Token(chainId, address, tokenData.decimals, tokenData.symbol, tokenData.name)\n  }\n\n  /**\n   * Fetch on-chain, information on multiple given ERC20 token addresses, using the given ethers provider\n   * (or a default one if not provided). The results are cached for efficient subsequent accesses.\n   * @param chainId chain of the token\n   * @param addresses addresses of the tokens for which the data is needed\n   * @param provider provider used to fetch the token\n   */\n  public static async fetchMultipleTokensData(\n    chainId: ChainId,\n    addresses: string[],\n    provider: Provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<Token[]> {\n    const { previouslyCachedTokens, missingTokens } = addresses.reduce<{\n      previouslyCachedTokens: Token[]\n      missingTokens: string[]\n    }>(\n      (\n        accumulator: {\n          previouslyCachedTokens: Token[]\n          missingTokens: string[]\n        },\n        address: string,\n        _currentIndex: number,\n        _array: string[]\n      ): { previouslyCachedTokens: Token[]; missingTokens: string[] } => {\n        if (TOKEN_DATA_CACHE?.[chainId]?.[address]) {\n          const cachedToken = TOKEN_DATA_CACHE[chainId][address]\n          accumulator.previouslyCachedTokens.push(\n            new Token(chainId, address, cachedToken.decimals, cachedToken.symbol, cachedToken.name)\n          )\n        } else {\n          accumulator.missingTokens.push(address)\n        }\n        return accumulator\n      },\n      { previouslyCachedTokens: [], missingTokens: [] }\n    )\n    const tokenData = previouslyCachedTokens\n    if (missingTokens.length > 0) {\n      const erc20Interface = new Interface(ERC20Abi)\n      const getSymbolFunction = erc20Interface.getFunction('symbol()')\n      const getNameFunction = erc20Interface.getFunction('name()')\n      const getDecimalsFunction = erc20Interface.getFunction('decimals()')\n      const multicall = new Contract(PERMISSIVE_MULTICALL_ADDRESS[chainId], PERMISSIVE_MULTICALL_ABI, provider)\n      const aggregatedCalls = missingTokens.reduce<[string, string][]>(\n        (\n          accumulator: [string, string][],\n          address: string,\n          _currentIndex: number,\n          _array: string[]\n        ): [string, string][] => {\n          accumulator.push([address, erc20Interface.encodeFunctionData(getSymbolFunction)])\n          accumulator.push([address, erc20Interface.encodeFunctionData(getNameFunction)])\n          accumulator.push([address, erc20Interface.encodeFunctionData(getDecimalsFunction)])\n          return accumulator\n        },\n        []\n      )\n      const result = await multicall.aggregateWithPermissiveness(aggregatedCalls)\n      const returnData = result[1]\n      missingTokens.forEach((address: string, index: number) => {\n        const [wrappedSymbol, wrappedName, wrappedDecimals] = returnData.slice(index * 3, index * 3 + 3)\n        if (!wrappedSymbol.success || !wrappedName.success || !wrappedDecimals.success) {\n          console.warn(`could not fetch ERC20 data for address ${address}`)\n          return\n        }\n        try {\n          tokenData.push(\n            new Token(\n              chainId,\n              address,\n              erc20Interface.decodeFunctionResult(getDecimalsFunction, wrappedDecimals.data)[0],\n              erc20Interface.decodeFunctionResult(getSymbolFunction, wrappedSymbol.data)[0],\n              erc20Interface.decodeFunctionResult(getNameFunction, wrappedName.data)[0]\n            )\n          )\n        } catch (error) {\n          console.error(`error decoding ERC20 data for address ${address}`)\n        }\n      })\n    }\n    return tokenData\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId)),\n    platform: RoutablePlatform = RoutablePlatform.HONEYSWAP\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB, platform)\n    const [reserves0, reserves1] = await new Contract(address, IDXswapPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    const tokenAmountA = new TokenAmount(tokenA, balances[0])\n    const tokenAmountB = new TokenAmount(tokenB, balances[1])\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    const liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, platform),\n      18,\n      'DXS',\n      'DXswap'\n    )\n    const swapFee = JSBI.BigInt(await new Contract(liquidityToken.address, IDXswapPair.abi, provider).swapFee())\n    const protocolFeeDenominator = JSBI.BigInt(\n      await new Contract(\n        FACTORY_ADDRESS[tokenAmountA.token.chainId],\n        IDXswapFactory.abi,\n        provider\n      ).protocolFeeDenominator()\n    )\n    return new Pair(tokenAmountA, tokenAmountB, swapFee, protocolFeeDenominator)\n  }\n\n  /**\n   * Fetches swap fee information from a liquidity token of a token pair\n   * @param liquidityToken the liquidity token from which the swap fee info will be fetched\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchSwapFee(\n    liquidityToken: Token,\n    provider = getDefaultProvider(getNetwork(liquidityToken.chainId))\n  ): Promise<{\n    fee: BigintIsh\n    owner: string\n  }> {\n    return {\n      fee: JSBI.BigInt(await new Contract(liquidityToken.address, IDXswapPair.abi, provider).swapFee()),\n      owner: await new Contract(FACTORY_ADDRESS[liquidityToken.chainId], IDXswapFactory.abi, provider).feeToSetter()\n    }\n  }\n\n  /**\n   * Fetches swap fee information from liquidity tokens of token pairs\n   * @param liquidityToken the liquidity tokens from which the swap fee info will be fetched\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchSwapFees(\n    liquidityTokens: Token[],\n    provider = getDefaultProvider(getNetwork(liquidityTokens[0].chainId))\n  ): Promise<\n    {\n      fee: BigintIsh\n      owner: string\n    }[]\n  > {\n    const multicall = new Contract(\n      PERMISSIVE_MULTICALL_ADDRESS[liquidityTokens[0].chainId],\n      PERMISSIVE_MULTICALL_ABI,\n      provider\n    )\n    const factoryContract = new Contract(FACTORY_ADDRESS[liquidityTokens[0].chainId], IDXswapFactory.abi, provider)\n    const liquidityTokenContract = new Contract(liquidityTokens[0].address, IDXswapPair.abi, provider)\n    let calls = []\n    calls.push({\n      address: factoryContract.address,\n      callData: factoryContract.interface.encodeFunctionData(factoryContract.interface.getFunction('feeToSetter()'))\n    })\n    for (let tokenPairsIndex = 0; tokenPairsIndex < liquidityTokens.length; tokenPairsIndex++) {\n      calls.push({\n        address: liquidityTokens[tokenPairsIndex].address,\n        callData: liquidityTokenContract.interface.encodeFunctionData(\n          liquidityTokenContract.interface.getFunction('swapFee()')\n        )\n      })\n    }\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    const owner = factoryContract.interface.decodeFunctionResult(\n      factoryContract.interface.getFunction('feeToSetter()'),\n      result.returnData[0]\n    )[0]\n    let fees = []\n    for (let resultIndex = 1; resultIndex < result.returnData.length; resultIndex++) {\n      fees.push({\n        fee: JSBI.BigInt(\n          liquidityTokenContract.interface.decodeFunctionResult(\n            liquidityTokenContract.interface.getFunction('swapFee()'),\n            result.returnData[resultIndex]\n          )[0]\n        ),\n        owner\n      })\n    }\n    return fees\n  }\n\n  /**\n   * Fetches swap fee information of all registered token pairs from factory\n   * @param chainId the chainId of the network to fecth the swap fees\n   * @param swapFeesCache a cache of already fetched fees to be skiped\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchAllSwapFees(\n    chainId: ChainId,\n    swapFeesCache: {\n      [key: string]: {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {},\n    provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<{\n    [key: string]: {\n      fee: BigintIsh\n      owner: string\n    }\n  }> {\n    const multicall = new Contract(PERMISSIVE_MULTICALL_ADDRESS[chainId], PERMISSIVE_MULTICALL_ABI, provider)\n    const factoryContract = new Contract(FACTORY_ADDRESS[chainId], IDXswapFactory.abi, provider)\n    const allPairsLength = await factoryContract.allPairsLength()\n    let allSwapPairs: {\n      [key: string]: {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {}\n\n    // Get first token pairs from cache\n    let tokenPairsCache = Object.keys(swapFeesCache)\n    let tokenPairsToFetch: Token[] = []\n    for (let tokenPaisCacheIndex = 0; tokenPaisCacheIndex < tokenPairsCache.length; tokenPaisCacheIndex++) {\n      allSwapPairs[tokenPairsCache[tokenPaisCacheIndex]] = {\n        fee: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].fee,\n        owner: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].owner\n      }\n    }\n\n    // Get rest of the token pairs that are not cached\n    let calls = []\n    for (let pairIndex = tokenPairsCache.length; pairIndex < allPairsLength; pairIndex++)\n      calls.push({\n        address: factoryContract.address,\n        callData: factoryContract.interface.encodeFunctionData(\n          factoryContract.interface.getFunction('allPairs(uint)'),\n          [pairIndex]\n        )\n      })\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    for (let resultIndex = 0; resultIndex < result.returnData.length; resultIndex++) {\n      const tokenPairAddress = factoryContract.interface.decodeFunctionResult(\n        factoryContract.interface.getFunction('allPairs(uint256)'),\n        result.returnData[resultIndex]\n      )[0]\n      tokenPairsToFetch.push(new Token(chainId, tokenPairAddress, 18, 'DXS', 'DXswap'))\n    }\n\n    // Fetch the pairs that we dont have the fee and owner\n    const swapFeesFetched = await this.fetchSwapFees(tokenPairsToFetch, provider)\n    for (let tokenPairsToFetchIndex = 0; tokenPairsToFetchIndex < tokenPairsToFetch.length; tokenPairsToFetchIndex++)\n      allSwapPairs[tokenPairsToFetch[tokenPairsToFetchIndex].address] = swapFeesFetched[tokenPairsToFetchIndex]\n    return allSwapPairs\n  }\n\n  /**\n   * Fetches protocol fee information from the token pair factory\n   * @param chainId the chainId of the network to fecth the protocol fee\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchProtocolFee(\n    chainId: ChainId,\n    provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<{\n    feeDenominator: BigintIsh\n    feeReceiver: string\n  }> {\n    const factoryContract = await new Contract(FACTORY_ADDRESS[chainId], IDXswapFactory.abi, provider)\n    const feeDenominator = await factoryContract.protocolFeeDenominator()\n    const feeReceiver = await factoryContract.feeTo()\n    return { feeDenominator, feeReceiver }\n  }\n\n  /**\n   * Fetches the default DXdao token list from the token registry scheme.\n   * @param chainId the chainId of the network to fecth the protocol fee\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchDxDaoTokenList(chainId: ChainId): Promise<TokenList> {\n    const tokenListUrl = new Map([\n      [1, 'https://tokens.coingecko.com/uniswap/all.json'],\n      [100, 'https://unpkg.com/@1hive/default-token-list@latest/build/honeyswap-default.tokenlist.json'],\n      [137, 'https://unpkg.com/@1hive/default-token-list@latest/build/honeyswap-default.tokenlist.json']\n//       [100, 'https://tokens.honeyswap.org'],\n//       [137, 'https://tokens.honeyswap.org']\n    ])\n\n    // const tokenRegistryContract = new Contract(TOKEN_REGISTRY_ADDRESS[chainId], TokenRegistryAbi, provider)\n    // const tokenAddresses = await tokenRegistryContract.getTokens(DXSWAP_TOKEN_LIST_ID[chainId])\n    // const tokens = await this.fetchMultipleTokensData(chainId, tokenAddresses, provider)\n\n    const chainTokenURL = tokenListUrl.get(chainId) ?? ''\n\n    const response = await fetch(chainTokenURL, {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json;charset=UTF-8'\n      }\n    })\n\n    const tokenList = []\n\n    if (!response.ok) {\n      return {\n        name: 'default token list',\n        tokens: []\n      }\n    }\n\n    const { tokens }: { tokens: TokenInfo[] } = await response.json()\n\n    if (tokens.length != 0) {\n      await this.fetchTokenLogoUri(chainId, tokens)\n    }\n\n    for (const token of tokens) {\n      if (token.chainId === chainId) {\n        tokenList.push({\n          chainId,\n          address: token.address,\n          name: token.name!,\n          decimals: token.decimals,\n          symbol: token.symbol!,\n          logoURI: token.logoURI\n        })\n      }\n    }\n\n    return {\n      name: 'swapr default token list',\n      tokens: tokenList\n    }\n  }\n\n  private static async fetchTokenLogoUri(tokenChainId: number, tokens: TokenInfo[]): Promise<void> {\n    const chainId = tokenChainId\n    if (chainId !== ChainId.MAINNET && chainId !== ChainId.XDAI && chainId !== ChainId.MATIC) {\n      return // token logos not fully supported for testnets\n    }\n\n    if (Object.keys(TOKEN_LOGO_URI_CACHE[chainId]).length === 0) {\n      await this.populateTokenLogoCache(chainId, tokens)\n    }\n    return\n  }\n\n  public static async checkTokenLogoCache(chainId: ChainId): Promise<void> {\n    if (chainId !== ChainId.MAINNET && chainId !== ChainId.XDAI && chainId !== ChainId.MATIC) {\n      return // token logos not fully supported for testnets\n    }\n    if (Object.keys(TOKEN_LOGO_URI_CACHE[chainId]).length === 0) {\n      // populate cache\n      await this.fetchDxDaoTokenList(chainId)\n      return\n    }\n    return\n  }\n\n  public static async populateTokenLogoCache(chainId: ChainId, tokens: TokenInfo[]): Promise<void> {\n    TOKEN_LOGO_URI_CACHE[chainId] = tokens.reduce((cache: { [tokenAddress: string]: string }, token) => {\n      cache[token.address.toLowerCase()] = token.logoURI\n      return cache\n    }, {})\n  }\n\n  public static getCachedTokenLogo(token: Token): string {\n    const { chainId } = token\n    if (chainId !== ChainId.MAINNET && chainId !== ChainId.XDAI && chainId !== ChainId.MATIC) {\n      return ''\n    }\n    return TOKEN_LOGO_URI_CACHE[chainId][token.address.toLowerCase()] || ''\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","FACTORY_ADDRESS","MAINNET","coreMainnet","factory","RINKEBY","coreRinkeby","ARBITRUM_TESTNET_V3","coreArbitrumTestnetV3","SOKOL","coreSokol","XDAI","coreXDai","MATIC","coreMatic","ROUTER_ADDRESS","peripheryRinkeby","router","peripheryMainnet","peripheryArbitrumTestnetV3","peripherySokol","peripheryXDai","peripheryMatic","STAKING_REWARDS_FACTORY_ADDRESS","TOKEN_REGISTRY_ADDRESS","DXSWAP_TOKEN_LIST_ID","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_25","SECONDS_IN_YEAR","_30","_100","_1000","_10000","defaultSwapFee","defaultProtocolFeeDenominator","SOLIDITY_TYPE_MAXIMA","uint8","uint256","PERMISSIVE_MULTICALL_ADDRESS","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","Currency","decimals","symbol","isNative","currency","values","NATIVE_CURRENCY","indexOf","getNative","chainId","ETHER","SPOA","USD","Token","equals","other","this","sortsBefore","toLowerCase","getNativeWrapper","NATIVE_CURRENCY_WRAPPER","isNativeWrapper","token","currencyEquals","currencyA","currencyB","WETH","WSPOA","WXDAI","WMATIC","DXD","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","amount","parsedAmount","exponentiate","nativeCurrency","usd","raw","toExact","TokenAmount","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","RoutablePlatform","factoryAddress","routerAddress","initCodeHash","supportsChain","INITIAL_CACHE_STATE","PAIR_ADDRESS_CACHE","SWAPR","SUSHISWAP","UNISWAP","HONEYSWAP","BAOSWAP","QUICKSWAP","Pair","tokenAmountA","tokenAmountB","swapFee","protocolFeeDenominator","platform","liquidityMiningCampaigns","tokenAmounts","liquidityTokenAddress","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE3","_PAIR_ADDRESS_CACHE3$","_PAIR_ADDRESS_CACHE3$2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","PricedTokenAmount","price","utils","parseUnits","MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY","LiquidityMiningCampaign","startsAt","endsAt","targetedPair","rewards","staked","locked","stakingCap","duration","now","Math","floor","Date","jsbiStartsAt","jsbiEndsAt","remainingDistributionPercentage","map","reward","remainingRewards","stakedValueNativeCurrency","nativeCurrencyAmount","yieldInPeriod","remainingRewardAmount","annualizationMultiplier","rawApy","PricedToken","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","deadline","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DATA_CACHE","TOKEN_LOGO_URI_CACHE","Fetcher","fetchTokenData","provider","tokenData","getDefaultProvider","getNetwork","_TOKEN_DATA_CACHE$cha","multicall","Contract","PERMISSIVE_MULTICALL_ABI","erc20Interface","ERC20Abi","symbolFunction","getFunction","nameFunction","decimalsFunction","aggregate","encodeFunctionData","result","decodeFunctionResult","returnData","fetchMultipleTokensData","addresses","_currentIndex","_array","_TOKEN_DATA_CACHE$cha2","cachedToken","previouslyCachedTokens","missingTokens","Interface","getSymbolFunction","getNameFunction","getDecimalsFunction","aggregatedCalls","aggregateWithPermissiveness","forEach","index","wrappedSymbol","wrappedName","wrappedDecimals","success","data","console","warn","fetchPairData","IDXswapPair","abi","getReserves","reserves0","reserves1","balances","IDXswapFactory","fetchSwapFee","feeToSetter","fee","owner","fetchSwapFees","liquidityTokens","factoryContract","liquidityTokenContract","calls","callData","tokenPairsIndex","call","fees","resultIndex","fetchAllSwapFees","swapFeesCache","allPairsLength","allSwapPairs","tokenPairsCache","keys","tokenPairsToFetch","tokenPaisCacheIndex","pairIndex","tokenPairAddress","swapFeesFetched","tokenPairsToFetchIndex","fetchProtocolFee","feeDenominator","feeTo","feeReceiver","fetchDxDaoTokenList","chainTokenURL","Map","get","fetch","method","headers","response","tokenList","ok","json","logoURI","_this4","fetchTokenLogoUri","tokenChainId","_this6","populateTokenLogoCache","checkTokenLogoCache","_this8","cache","getCachedTokenLogo"],"mappings":"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"}