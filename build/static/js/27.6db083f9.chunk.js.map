{"version":3,"sources":["pages/Airdrop/login.tsx","functions/auth.js"],"names":["FormContainer","styled","div","Form","form","theme","bg1","bg2","FormTitle","h2","FormGroup","Label","label","Input","input","props","error","SubmitButton","button","ErrorMessage","p","SuccessMessage","Login","history","useState","email","password","userInput","setUserInput","emailError","passwordError","errors","setErrors","success","setSuccess","processing","setProcessing","setError","setToken","user","isAuthenticated","handleChange","event","target","name","value","validate","handleSubmit","a","preventDefault","isValid","login","then","data","status","message","authenticate","token","role","push","to","onSubmit","htmlFor","type","onChange","disabled","style","display","flexDirection","color","fetch","process","method","headers","Accept","body","JSON","stringify","response","json","catch","err","console","log","changePassword"],"mappings":"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","file":"static/js/27.6db083f9.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { authenticate, isAuthenticated } from '../../helper/auth'\nimport { login } from '../../functions/auth'\nimport { Link, Redirect } from 'react-router-dom'\nimport Loader from 'src/components/Loader'\n\n// Styled-Components\nconst FormContainer = styled.div`\n\twidth: 100%;\n\toverflow: visible;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tmargin: auto;\n`\n\nconst Form = styled.form`\n\twidth: calc(100% - 40px);\n\tmax-width: 400px;\n\tbackground-color: ${({ theme }) => theme.bg1};\n\tborder: 1px solid ${({ theme }) => theme.bg2};\n\tborder-radius: 8px;\n\tpadding: 1rem;\n`\n\nconst FormTitle = styled.h2`\n\tfont-size: 1.3rem;\n\ttext-align: center;\n\tmargin-bottom: 1rem;\n`\n\nconst FormGroup = styled.div`\n\tmargin-bottom: 1.5rem;\n`\n\nconst Label = styled.label`\n\tfont-size: 1rem;\n`\n\nconst Input = styled.input<{ error: string }>`\n\tbackground: none;\n\tdisplay: block;\n\twidth: 100%;\n\tpadding: 0.5rem;\n\tfont-size: 1rem;\n\tborder: 1px solid #eaeaea;\n\tcolor: #ffffff;\n\tborder-radius: 5px;\n\tmargin-bottom: 0.5rem;\n\t&:focus {\n\t\toutline: none;\n\t\tcolor: #ffffff;\n\t\tborder-color: #eaeaea;\n\t\tborder-width: 2px;\n\t}\n\t${(props) =>\n\t\tprops.error &&\n\t\t`\n    border-color: #f44336;\n  `};\n`\n\nconst SubmitButton = styled.button`\n\twidth: 100%;\n\tcursor: pointer;\n\ttransition: all 0.5s ease;\n\tbackground-color: #7eb946;\n\tcolor: #ffffff;\n\tfont-size: 1rem;\n\tpadding: 0.5rem 1rem;\n\tborder: none;\n\tborder-radius: 5px;\n\t&:hover {\n\t\tbackground-color: #212121;\n\t\tcolor: #eaeaea;\n\t}\n`\n\nconst ErrorMessage = styled.p`\n\tfont-size: 1rem;\n\tcolor: #f44336;\n`\n\nconst SuccessMessage = styled.p`\n\tfont-size: 1rem;\n\tcolor: #4caf50;\n`\n\nconst Login = ({ history }) => {\n\t// State to hold user input\n\tconst [userInput, setUserInput] = useState({\n\t\temail: '',\n\t\tpassword: ''\n\t})\n\t// State to hold errors\n\tconst [errors, setErrors] = useState({\n\t\temailError: '',\n\t\tpasswordError: ''\n\t})\n\t// State to hold success message\n\tconst [success, setSuccess] = useState('')\n\tconst [processing, setProcessing] = useState(false)\n\tconst [error, setError] = useState('')\n\tconst [token, setToken] = useState('')\n\tconst { user } = isAuthenticated()\n\n\t// Function to handle user input\n\tconst handleChange = (event) => {\n\t\tconst { name, value } = event.target\n\t\tsetUserInput({\n\t\t\t...userInput,\n\t\t\t[name]: value\n\t\t})\n\t}\n\n\t// Function to check for errors\n\tconst validate = () => {\n\t\tlet emailError = ''\n\t\tlet passwordError = ''\n\n\t\t// Check for empty email\n\t\tif (!userInput.email) {\n\t\t\temailError = 'Email cannot be empty'\n\t\t}\n\t\t// Check for empty password\n\t\tif (!userInput.password) {\n\t\t\tpasswordError = 'Password cannot be empty'\n\t\t}\n\t\t// Set errors accordingly\n\t\tif (emailError || passwordError) {\n\t\t\tsetErrors({\n\t\t\t\temailError,\n\t\t\t\tpasswordError\n\t\t\t})\n\t\t\treturn false\n\t\t}\n\t\treturn true\n\t}\n\n\t// Function to handle form submission\n\tconst handleSubmit = async (event) => {\n\t\tevent.preventDefault()\n\t\tconst isValid = validate()\n\t\tsetProcessing(true)\n\t\tif (isValid) {\n\t\t\tsetErrors({\n\t\t\t\temailError: '',\n\t\t\t\tpasswordError: ''\n\t\t\t})\n\t\t}\n\n\t\tlogin({ email: userInput.email, password: userInput.password }).then((data) => {\n\t\t\tif (data.status == false) {\n\t\t\t\tsetError(data.message)\n\t\t\t\tsetSuccess('')\n\t\t\t\tsetProcessing(false)\n\t\t\t\treturn\n\t\t\t} else {\n\n\t\t\t\tauthenticate(data, () => {\n\t\t\t\t\t// Clear state\n\t\t\t\t\tsetUserInput({\n\t\t\t\t\t\temail: '',\n\t\t\t\t\t\tpassword: ''\n\t\t\t\t\t})\n\t\t\t\t\tsetError('')\n\t\t\t\t\tsetToken(data.token)\n\t\t\t\t\tsetProcessing(false)\n\t\t\t\t\tuser && user.role === 'admin' ? history.push('/admin/dashboard') : history.push('/dashboard')\n\t\t\t\t\tsetSuccess(data.message)\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t{user ? <Redirect to=\"/\" /> : null}\n\t\t\t<FormContainer>\n\t\t\t\t<Form onSubmit={handleSubmit}>\n\t\t\t\t\t<FormTitle>Login Now</FormTitle>\n\t\t\t\t\t{success ? <SuccessMessage>{success}</SuccessMessage> : null}\n\t\t\t\t\t{error ? <ErrorMessage>{error}</ErrorMessage> : null}\n\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t<Label htmlFor=\"email\">Email</Label>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\tvalue={userInput.email}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\terror={errors.emailError}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{errors.emailError ? <ErrorMessage>{errors.emailError}</ErrorMessage> : null}\n\t\t\t\t\t</FormGroup>\n\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t<Label htmlFor=\"password\">Password</Label>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\tvalue={userInput.password}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\terror={errors.passwordError}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{errors.passwordError ? <ErrorMessage>{errors.passwordError}</ErrorMessage> : null}\n\t\t\t\t\t</FormGroup>\n\n\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t{processing ? (\n\t\t\t\t\t\t\t<SubmitButton disabled type=\"submit\">\n\t\t\t\t\t\t\t\tSubmitting<Loader/>\n\t\t\t\t\t\t\t</SubmitButton>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<SubmitButton type=\"submit\">Submit</SubmitButton>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</FormGroup>\n\t\t\t\t\t<div style={{display: \"flex\", flexDirection:'column'}}>\n\t\t\t\t\t\t<Link to=\"/change/password\" style={{ color: '#fff' }}>\n\t\t\t\t\t\t\tForgot Password?\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t<Link to=\"/register\" style={{ color: '#fff' }}>\n\t\t\t\t\t\t\tDon't have an account? Register\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t</Form>\n\t\t\t</FormContainer>\n\t\t</>\n\t)\n}\n\nexport default Login\n","export const login = (user) => {\n\treturn fetch(`${process.env.REACT_APP_BACKEND_API}/login`, {\n\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(user)\n\t})\n\t\t.then((response) => {\n\t\t\treturn response.json()\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err)\n\t\t})\n}\nexport const changePassword = (user) => {\n\treturn fetch(`${process.env.REACT_APP_BACKEND_API}/sendResetPasswordCode`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(user)\n\t})\n\t\t.then((response) => {\n\t\t\treturn response.json()\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err)\n\t\t})\n}\n"],"sourceRoot":""}