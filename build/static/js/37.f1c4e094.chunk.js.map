{"version":3,"sources":["pages/Stake/pool.tsx","pages/Stake/mypool.tsx","pages/Stake/create.tsx","pages/Stake/index.tsx"],"names":["tokens","_chainid","stakeData","_rewardToken","_rewardTokenDecimal","_rewardTokenSymbol","_ether","_account","_tmr","_wallet","_filterData","_filter","search","length","_div","bool","i","E","_pool","poolId","live","ended","style","display","all","searchData","staked","totalStaked","n","innerHTML","emptyFilter","_search","d","tmp","_bol","replace","indexOf","stakeTokenInfo","symbol","native","toLowerCase","name","rewardTokenInfo","_sortData","sort","_resetView","sortBy","a","b","sortType","time","reward","stake_other_pool","appendChild","stakeView","msg","ymsg","stakers","Intl","NumberFormat","maximumSignificantDigits","format","myStake","Math","pow","decimal","Rewards","_yield","yield","yieldType","yieldDuration","onRender","stakeImg","stakeName","earnImg","earnName","tokenAddress","src","tokenInfo","logoURI","ZERO_ADDRESS","_v","undefined","logo","Logo","onclick","goToStakePool","loadTokenInfo","empty","console","log","id","window","location","href","Pool","useActiveWeb3React","account","chainId","useAllTokens","className","marginRight","marginTop","body","fontSize","lineHeight","textAlign","filterData","_bool","sortData","stake_my_pool","MyPool","_stakeToken","_liquidity","_yieldType","_yieldDuration","_duration","_isAllowed","_balance","hasCreated","zeroAddress","_creationFee","createHooks","useOne","getInputValue","_id","_res","querySelector","value","checkCurrencyAllowed","_address","_tokenSymbol","stake_button","disabled","_tokenAddress","_Address","config","chains","_stakeAddress","stake","ethers","Contract","abi","token","allowance","then","getAllowed","res","Create","useContext","ThemeContext","library","toggleWalletModal","useWalletModalToggle","_tmp","CREATION_FEE","getCreationFee","amt","e","useState","_useOne","setUseOne","platformOverride","setPlatformOverride","useSwapState","independentField","typedValue","dependentField","recipient","Field","INPUT","OUTPUT","useSwapActionHandlers","onCurrencySelection","onUserInput","useDerivedSwapInfo","potentialTrade","trade","currencyBalances","allPlatformTrades","parsedAmount","currencies","inputError","useWrapCallback","wrapType","maxAmountOutput","execute","maxAmountSpend","showWrap","WrapType","NOT_APPLICABLE","parsedAmounts","inputAmount","outputAmount","formattedAmounts","toExact","toSignificant","handleInputSelect","useCallback","inputCurrency","handleOutputSelect","outputCurrency","handleTypeOutput","handleMaxOuput","useMemo","Object","values","map","v","address","decimals","getCurrencyValue","stakeAddress","rewardAddress","onToggle","_value","stake_yield_msg","showMsg","_value1","_value3","msg2","_yield_msg","switchOneToMany","onClick","_c","forEach","callback","margin","border","Button","color","CurrencyInputPanel","label","showMaxButton","hideInput","onCurrencySelect","currency","otherCurrency","onMax","marginLeft","onInput","stake_yield_input","type","placeholder","stake_end_input","signer","getSigner","approve","Web3","utils","toWei","grantPermission","clearTimeout","showModalInfo","setModalMsg","setModalStaus","tx","hash","wait","setTimeout","status","catch","err","readErrorMessage","_a","yiel","floor","vaidateStakeData","liquid","toBig","myPrompt","_choice","_liquid","yield_tmp","yield_dur","toBN","p","add","createPool","toString","allTokens","_view","stakeMyData","finished","selectView","_viewNo","_stakeViews","document","getElementById","_stakeViewChild","stakeViewChild","children","loadData","_data","getPoolWithUser","getStakeData","_mypool","owner","push","_init","getSortData","_init_","showCreateStaked","stake_create","Stake","useEffect","_callback","borderRight","selected","JSON","stringify","Toggle"],"mappings":"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","file":"static/js/37.f1c4e094.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './stake.css'\nimport { OutlineCard } from '../../components/Card'\nimport { TYPE } from '../../theme'\nimport Logo from '../../assets/images/ethereum-logo.png' \nimport { useActiveWeb3React } from '../../hooks'\nimport { E, onRender, native } from '../../components/utility'\nimport { useAllTokens, useCurrency } from '../../hooks/Tokens'\nimport { ZERO_ADDRESS } from '../../constants'\nimport { useDefaultsFromURLSearch } from '../../state/swap/hooks'\nlet tokens: any; let currency: any; let _chainid: any; let stakeData: any;\nlet tmpChain: any; //to monitor chain change\nconst _init_ = (_data: any, _filter: any, sort: any) => {  \n    //to load the image data\n    const stake_other_pool = E('stake_other_pool_results')\n    if(stake_other_pool != null) {   \n        stake_other_pool.innerHTML = \"<div id='stake_other_pool_empty'></div>\";\n        stakeData = _data;// storing the stake data, would be used for filtering \n        if(_data.length > 0) {\n            _sortData(sort, false)\n            for(let i=0;i<_data.length;i++) {\n                stake_other_pool.innerHTML += stakeView(_data[i])\n            }\n            //apply filter\n            _filterData(_filter, \"\")\n        }\n        else {\n            //empty\n            stake_other_pool.innerHTML = empty()\n        }\n        stake_other_pool.style.display = \"flex\";\n        (E('stake_other_pool_info') as HTMLDivElement).style.display = 'none'\n    }\n}\nconst _filterData = (_filter: any, search: any) => {\n    if(stakeData) {\n        if(stakeData.length > 0) {\n            let _div: any; let bool: boolean = false;\n            for(let i=0;i<stakeData.length;i++) {\n                _div = E(`stake_other_pool_view_${stakeData[i]._pool.poolId}`) as HTMLDivElement\n                if(_div != null)\n                    //lets use filter\n                    if(_filter.live) { \n                        //check if its live\n                        if(!stakeData[i].ended) {\n                            //check for staked\n                            if(_filter.all && searchData(search, stakeData[i])) {\n                                _div.style.display = \"\"; bool = true\n                            }\n                            else if(_filter.staked && stakeData[i].totalStaked > 0 && searchData(search, stakeData[i])){\n                                _div.style.display = \"\"; bool = true\n                            }\n                            else {\n                                _div.style.display = \"none\"\n                            }\n                        }\n                        else{ _div.style.display = \"none\"}\n                    }\n                    else {\n                        if(stakeData[i].ended) {\n                            //check for staked\n                            if(_filter.all && searchData(search, stakeData[i])) {\n                                _div.style.display = \"\"; bool = true\n                        }\n                        else if(_filter.staked && stakeData[i].totalStaked > 0 && searchData(search, stakeData[i])){\n                            _div.style.display = \"\"; bool = true\n                        }\n                        else {\n                            _div.style.display = \"none\"\n                        }\n                        }\n                        else{ _div.style.display = \"none\"}\n                    }\n            }\n            const n = E('stake_other_pool_empty') as HTMLDivElement\n            if(!bool) {\n                //nothing to show\n               n.innerHTML = emptyFilter()\n           }\n           else {\n            n.innerHTML = \"\"\n           }\n        }\n    }\n}\nconst searchData = (_search: any, d: any) => {\n      //lets apply search, first search id\n      if(d != null) {\n        if(_search != \"\"){\n            let _bol: boolean = false; let tmp: any;\n            tmp = _search.replace(/[^0-9]/g,\"\")\n            if((d._pool.poolId + \"\").indexOf(tmp+\"\") > -1 && tmp != \"\") {\n                            //has passed id search\n                            _bol = true\n            }\n            //do token search\n            _bol = _bol || (d._pool.stakeTokenInfo.symbol || native(_chainid)?.symbol).toLowerCase().indexOf(_search) > -1\n            _bol = _bol || (d._pool.stakeTokenInfo.name || native(_chainid)?.name).toLowerCase().indexOf(_search) > -1\n            _bol = _bol || (d._pool.rewardTokenInfo.symbol || native(_chainid)?.symbol).toLowerCase().indexOf(_search) > -1\n            _bol = _bol || (d._pool.rewardTokenInfo.name || native(_chainid)?.name).toLowerCase().indexOf(_search) > -1\n            \n            \n            return _bol;\n        }\n        else {\n            return true\n        }\n    }   \n    else {return false}      \n}   \nconst _sortData = (sort: any, _resetView: boolean) => { \n    if(stakeData.length > 0) {  \n        if(sort.sortBy == 'create'){\n            stakeData.sort(function(a: any, b: any){\n                if(sort.sortType == 'down'){return b._pool.time[0] - a._pool.time[0]}\n                else {return a._pool.time[0] - b._pool.time[0]}\n            });\n        }\n        else if(sort.sortBy == 'mine'){\n            stakeData.sort(function(a: any, b: any){\n                if(sort.sortType == 'down'){return b.totalStaked - a.totalStaked}\n                else {return a.totalStaked - b.totalStaked}\n            });\n        }\n        else if(sort.sortBy == 'earned'){\n            stakeData.sort(function(a: any, b: any){\n                if(sort.sortType == 'down'){return b.reward - a.reward}\n                else {return a.reward - b.reward}\n            });\n        }\n        else if(sort.sortBy == 'total'){\n            stakeData.sort(function(a: any, b: any){\n                if(sort.sortType == 'down'){return b._pool.totalStaked - a._pool.totalStaked}\n                else {return a._pool.totalStaked - b._pool.totalStaked}\n            });\n        }\n        //to reset view if allowed\n        if(_resetView) {  \n            let _div:any\n            //to reset view\n            const stake_other_pool = E('stake_other_pool_results') as HTMLDivElement\n            if(stake_other_pool != null) {\n                for(let i=0;i<stakeData.length;i++) {\n                    _div = E(`stake_other_pool_view_${stakeData[i]._pool.poolId}`) as HTMLDivElement\n                    if(_div != null){\n                        //place at top if its the first\n                        stake_other_pool.appendChild(_div)\n                    }\n                }\n            }\n        }\n    }\n}\n//to load the token info for the stake\nconst loadTokenInfo = (d:any) => {\n    //get token images \n    onRender(`stake_other_pool_view_stakeimg_${d._pool.poolId}`, () => {\n        const stakeImg = E(`stake_other_pool_view_stakeimg_${d._pool.poolId}`) as HTMLImageElement\n        const stakeName = E(`stake_other_pool_view_stakename_${d._pool.poolId}`) \n        const earnImg = E(`stake_other_pool_view_earnimg_${d._pool.poolId}`) as HTMLImageElement\n        const earnName = E(`stake_other_pool_view_earnname_${d._pool.poolId}`) \n        if(stakeImg != null && stakeName != null && earnImg != null && earnName != null) { \n            if(d._pool.stakeTokenInfo.tokenAddress in tokens) { \n                //set the stake token image, and name\n                stakeImg.src = tokens[d._pool.stakeTokenInfo.tokenAddress].tokenInfo.logoURI\n                stakeName.innerHTML = \"Stake \" + d._pool.stakeTokenInfo.symbol\n            }\n            else if(d._pool.stakeTokenInfo.tokenAddress == ZERO_ADDRESS) {\n                //using default currency\n                let _v = native(_chainid)\n                if(_v != undefined) {\n                     stakeImg.src = _v.logo\n                     stakeName.innerHTML = \"Stake \" + _v.symbol\n                }\n            }\n            else {\n                //use default image\n                stakeImg.src = Logo\n                stakeName.innerHTML = \"Stake \" + d._pool.stakeTokenInfo.symbol\n            }\n            if(d._pool.rewardTokenInfo.tokenAddress in tokens) { \n                //set the stake token image\n                earnImg.src = tokens[d._pool.rewardTokenInfo.tokenAddress].tokenInfo.logoURI\n                earnName.innerHTML = \"Earn <b>\" + d._pool.rewardTokenInfo.symbol + \"</b>\"\n            }\n            else if(d._pool.rewardTokenInfo.tokenAddress == ZERO_ADDRESS) {\n                //using default currency\n                let _v = native(_chainid)\n                if(_v != undefined) {\n                    earnImg.src = _v.logo;\n                    earnName.innerHTML = \"Earn <b>\" + _v.symbol + \"</b>\"\n                }\n            }\n            else {\n                //use default image\n                earnImg.src = Logo\n                earnName.innerHTML = \"Earn <b>\" + d._pool.rewardTokenInfo.symbol + \"</b>\"\n            }\n\n            //setting the amount staked\n            \n        }\n        const a = E(`stake_other_pool_view_${d._pool.poolId}`) as HTMLDivElement\n        a.onclick = () => {\n            goToStakePool(d._pool.poolId)\n        }\n    })\n}\nconst stakeView = (d: any) => {\n      let msg: any;let ymsg: any; if(d._pool.stakers == 1){msg = (Intl.NumberFormat('en-US', {maximumSignificantDigits: 6}).format(d._pool.stakers)) + \" Staker\"}else if(d._pool.stakers > 1) {msg = (Intl.NumberFormat('en-US', {maximumSignificantDigits: 6}).format(d._pool.stakers)) + \" Stakers\"} else {msg = \"\"}\n      let myStake: any =  (Intl.NumberFormat('en-US', {maximumSignificantDigits: 6}).format(d.totalStaked / (Math.pow(10,d._pool.stakeTokenInfo.decimal * 1))))\n      let Rewards: any =  (Intl.NumberFormat('en-US', {maximumSignificantDigits: 6}).format(d.reward / (Math.pow(10,d._pool.rewardTokenInfo.decimal * 1))))\n      let totalStaked: any =  (Intl.NumberFormat('en-US', {maximumSignificantDigits: 6}).format(d._pool.totalStaked / (Math.pow(10,d._pool.stakeTokenInfo.decimal * 1))))\n      let _yield: any =  (Intl.NumberFormat('en-US', {maximumSignificantDigits: 6}).format(d._pool.yield / (Math.pow(10,d._pool.rewardTokenInfo.decimal * 1))))\n      if(d._pool.yieldType == 1) {ymsg = _yield + \" units per 1\" + (d._pool.stakeTokenInfo.symbol || native(_chainid)?.symbol) + \" \"}else {ymsg = _yield + \"% \"}\n      if(d._pool.yieldDuration == 1) {ymsg += \"daily yield\"}else if(d._pool.yieldDuration == 2) {ymsg += \"weekly yield\"}\n      else if(d._pool.yieldDuration == 3) {ymsg += \"monthly yield\"}else if(d._pool.yieldDuration == 4) {ymsg += \"yearly yield\"}\n      loadTokenInfo(d)\n   return `<div id='stake_other_pool_view_${d._pool.poolId}' class='topGravity stake_pool' >\n    <div class='leftGravity stake_pool_top'>\n        <span>Pool${d._pool.poolId}</span>\n    </div>\n    <div class='leftGravity'>\n        <div class='leftGravity stake_div'>\n            <div class='leftGravity centre '>\n                <img id='stake_other_pool_view_stakeimg_${d._pool.poolId}'  class='stake_icon circle' />\n                <img id='stake_other_pool_view_earnimg_${d._pool.poolId}'  class='stake_earn_icon circle' />\n            </div>\n            <div class='topGravity stake_token_font'>\n                <span id='stake_other_pool_view_stakename_${d._pool.poolId}'></span>\n                <span id='stake_other_pool_view_earnname_${d._pool.poolId}' style='color:limegreen'></span>\n            </div>\n        </div>\n        <div class='leftGravity stake_token_font stake_div'>\n            <div class='topGravity stake_div_div'>\n                <span style='fontSize:12px'>Your Stake</span>\n                <span class='staked_amount'>${myStake} ${d._pool.stakeTokenInfo.symbol || native(_chainid)?.symbol}</span>\n            </div>\n        </div>\n        <div class='leftGravity stake_token_font stake_div'>\n            <div class='topGravity stake_div_div'>\n                <span style={{fontSize:'12px'}}>Reward earned</span>\n                <span class='staked_amount' style='color:limegreen'>${Rewards} ${d._pool.rewardTokenInfo.symbol || native(_chainid)?.symbol}</span>\n            </div>\n        </div>\n        <div class='leftGravity stake_token_font stake_div'>\n            <div class='topGravity stake_div_div'>\n                <span style='fontSize:12px'>Total Staked</span>\n                <span class='staked_amount'>${totalStaked} ${d._pool.stakeTokenInfo.symbol || native(_chainid)?.symbol}</span>\n            </div>\n        </div>\n        \n    </div>\n    <div class='leftGravity stake_pool_bottom'>\n        <span style='margin-left:auto; margin-right:10px'>${msg}</span>\n        <span>${ymsg}</span>\n    </div>\n    </div>`\n\n}\nconst empty = () => { console.log(0)\n    return `<div class='stake_empty' style='margin-top:32px'>\n    There are no staking pools created yet\n        </div>`    \n}\nconst emptyFilter = () => {\n    return `<div class='stake_empty' style='margin-top:32px'>\n    No staking pools found\n        </div>`    \n}\nconst goToStakePool = (id: any) => { \n    window.location.href = \"#/stakeview?id=\" + id\n}\n\nconst Pool = () => {\n    const { account, chainId } = useActiveWeb3React()\n    _chainid = chainId\n    tokens = useAllTokens();\n    // const monitorChainIdChange = () => {\n    //     if(_chainid != tmpChain) {\n    //         //chain changes\n    //         tmpChain = _chainid;\n    //         onRender('stake_other_pool', () => {\n    //             if(account) {  \n    //                 //     (E('stake_other_pool') as HTMLDivElement).innerHTML = `<div class='stake_loading'>\n    //                 // <span class='fas fa-spinner fa-spin' style='margin-right:15px'></span>\n    //                 // <span>Fetching staking pools</span></div>`\n    //             }\n    //     })\n    //     }\n    // }\n    // monitorChainIdChange();\n      \n     return (\n        <>\n        <div id='stake_other_pool' style={{display:'none'}}>\n          <div id='stake_other_pool_info'>\n            {!account ? (\n            <OutlineCard marginTop=\"60px\">\n              <TYPE.body fontSize=\"14px\" lineHeight=\"17px\" textAlign=\"center\">\n                Connect to a wallet to view stake pool.\n              </TYPE.body>\n            </OutlineCard>\n          ) : (\n            <div className='stake_loading'>\n              <span className='fas fa-spinner fa-spin' style={{marginRight:'15px'}}></span>\n              <span>Fetching staking pools</span>\n            </div>\n          )}\n          </div>\n          <div id='stake_other_pool_results' style={{display:'none'}}>\n\n          </div>\n\n        </div>\n      </>\n    )\n}\n\nexport {Pool, _init_, _filterData, _sortData};\n\n \n","import React, { useState } from 'react'\nimport './stake.css'\nimport { OutlineCard } from '../../components/Card'\nimport { TYPE } from '../../theme'\nimport Logo from '../../assets/images/ethereum-logo.png' \nimport { useActiveWeb3React } from '../../hooks'\nimport { E, onRender, native } from '../../components/utility'\nimport { useAllTokens, useCurrency } from '../../hooks/Tokens'\nimport { ZERO_ADDRESS } from '../../constants'\nimport { useDefaultsFromURLSearch } from '../../state/swap/hooks'\nlet tokens: any; let currency: any; let _chainid: any; let stakeData: any;\nlet tmpChain: any;\n\nconst _init = (_data: any, _filter: any, sort: any) => { \n    //to load the image data\n    const stake_my_pool = E('stake_my_pool_results')\n    if(stake_my_pool != null) {   \n        stake_my_pool.innerHTML = \"<div id='stake_pool_empty'></div>\";\n        stakeData = _data;// storing the stake data, would be used for filtering \n        if(_data.length > 0) {\n            sortData(sort, false)\n            for(let i=0;i<_data.length;i++) {\n                stake_my_pool.innerHTML += stakeView(_data[i])\n            }\n            //apply filter\n            filterData(_filter, \"\")\n        }\n        else {\n            //empty\n            stake_my_pool.innerHTML = empty()\n        }\n        stake_my_pool.style.display = \"flex\";\n        (E('stake_my_pool_info') as HTMLDivElement).style.display = 'none'\n    }\n}\nconst filterData = (_filter: any, search: any) => {\n    if(stakeData) {  \n        if(stakeData.length > 0) {\n            let _div: any; let _bool: boolean = false;\n            for(let i=0;i<stakeData.length;i++) {\n                _div = E(`stake_my_pool_view_${stakeData[i]._pool.poolId}`) as HTMLDivElement\n                if(_div != null)\n                    //lets use filter\n                    if(_filter.live) { \n                        //check if its live\n                        if(!stakeData[i].ended) {\n                            //check for staked\n                            if(_filter.all && searchData(search, stakeData[i])) {\n                                _div.style.display = \"\"; _bool = true\n                            }\n                            else if(_filter.staked && stakeData[i].totalStaked > 0 && searchData(search, stakeData[i])){\n                                _div.style.display = \"\"; _bool = true\n                            }\n                            else {\n                                _div.style.display = \"none\"\n                            }\n                        }\n                        else{ _div.style.display = \"none\"}\n                    }\n                    else {\n                        if(stakeData[i].ended) {\n                            //check for staked\n                            if(_filter.all && searchData(search, stakeData[i])) {\n                                _div.style.display = \"\"; _bool = true\n                        }\n                        else if(_filter.staked && stakeData[i].totalStaked > 0 && searchData(search, stakeData[i])){\n                            _div.style.display = \"\"; _bool = true\n                        }\n                        else {\n                            _div.style.display = \"none\"\n                        }\n                        }\n                        else{ _div.style.display = \"none\"}\n                    }\n            }\n            const n = E('stake_pool_empty') as HTMLDivElement\n            if(!_bool) {\n                //nothing to show\n               n.innerHTML = emptyFilter()\n            }\n            else {\n            n.innerHTML = \"\"\n           }\n        }\n    }\n}\nconst emptyFilter = () => {\n    return `<div class='stake_empty' style='margin-top:32px'>\n    No staking pools found\n        </div>`    \n}\nconst searchData = (_search: any, d: any) => {\n      //lets apply search, first search id\n      if(d != null) {\n        if(_search != \"\"){\n            let _bol: boolean = false; let tmp: any;\n            tmp = _search.replace(/[^0-9]/g,\"\")\n            if((d._pool.poolId + \"\").indexOf(tmp+\"\") > -1 && tmp != \"\") {\n                            //has passed id search\n                            _bol = true\n            }\n            //do token search\n            _bol = _bol || (d._pool.stakeTokenInfo.symbol || native(_chainid)?.symbol).toLowerCase().indexOf(_search) > -1\n            _bol = _bol || (d._pool.stakeTokenInfo.name || native(_chainid)?.name).toLowerCase().indexOf(_search) > -1\n            _bol = _bol || (d._pool.rewardTokenInfo.symbol || native(_chainid)?.symbol).toLowerCase().indexOf(_search) > -1\n            _bol = _bol || (d._pool.rewardTokenInfo.name || native(_chainid)?.name).toLowerCase().indexOf(_search) > -1\n            \n            \n            return _bol;\n        }\n        else {\n            return true\n        }\n    }   \n    else {return false}      \n}   \nconst sortData = (sort: any, _resetView: boolean) => { \n    if(stakeData.length > 0) {  \n        if(sort.sortBy == 'create'){\n            stakeData.sort(function(a: any, b: any){\n                if(sort.sortType == 'down'){return b._pool.time[0] - a._pool.time[0]}\n                else {return a._pool.time[0] - b._pool.time[0]}\n            });\n        }\n        else if(sort.sortBy == 'mine'){\n            stakeData.sort(function(a: any, b: any){\n                if(sort.sortType == 'down'){return b.totalStaked - a.totalStaked}\n                else {return a.totalStaked - b.totalStaked}\n            });\n        }\n        else if(sort.sortBy == 'earned'){\n            stakeData.sort(function(a: any, b: any){\n                if(sort.sortType == 'down'){return b.reward - a.reward}\n                else {return a.reward - b.reward}\n            });\n        }\n        else if(sort.sortBy == 'total'){\n            stakeData.sort(function(a: any, b: any){\n                if(sort.sortType == 'down'){return b._pool.totalStaked - a._pool.totalStaked}\n                else {return a._pool.totalStaked - b._pool.totalStaked}\n            });\n        }\n        //to reset view if allowed\n        if(_resetView) {  \n            let _div:any\n            //to reset view\n            const stake_my_pool = E('stake_my_pool_results') as HTMLDivElement\n            if(stake_my_pool != null) {\n                for(let i=0;i<stakeData.length;i++) {\n                    _div = E(`stake_my_pool_view_${stakeData[i]._pool.poolId}`) as HTMLDivElement\n                    if(_div != null){\n                        //place at top if its the first\n                        stake_my_pool.appendChild(_div)\n                    }\n                }\n            }\n        }\n    }\n}\n//to load the token info for the stake\nconst loadTokenInfo = (d:any) => {\n    //get token images \n    onRender(`stake_my_pool_view_stakeimg_${d._pool.poolId}`, () => {\n        const stakeImg = E(`stake_my_pool_view_stakeimg_${d._pool.poolId}`) as HTMLImageElement\n        const stakeName = E(`stake_my_pool_view_stakename_${d._pool.poolId}`) \n        const earnImg = E(`stake_my_pool_view_earnimg_${d._pool.poolId}`) as HTMLImageElement\n        const earnName = E(`stake_my_pool_view_earnname_${d._pool.poolId}`) \n        if(stakeImg != null && stakeName != null && earnImg != null && earnName != null) { \n            if(d._pool.stakeTokenInfo.tokenAddress in tokens) { \n                //set the stake token image, and name\n                stakeImg.src = tokens[d._pool.stakeTokenInfo.tokenAddress].tokenInfo.logoURI\n                stakeName.innerHTML = \"Stake \" + d._pool.stakeTokenInfo.symbol\n            }\n            else if(d._pool.stakeTokenInfo.tokenAddress == ZERO_ADDRESS) {\n                //using default currency\n                let _v = native(_chainid)\n                if(_v != undefined) {\n                     stakeImg.src = _v.logo\n                     stakeName.innerHTML = \"Stake \" + _v.symbol\n                }\n            }\n            else {\n                //use default image\n                stakeImg.src = Logo\n                stakeName.innerHTML = \"Stake \" + d._pool.stakeTokenInfo.symbol\n            }\n            if(d._pool.rewardTokenInfo.tokenAddress in tokens) { \n                //set the stake token image\n                earnImg.src = tokens[d._pool.rewardTokenInfo.tokenAddress].tokenInfo.logoURI\n                earnName.innerHTML = \"Earn <b>\" + d._pool.rewardTokenInfo.symbol + \"</b>\"\n            }\n            else if(d._pool.rewardTokenInfo.tokenAddress == ZERO_ADDRESS) {\n                //using default currency\n                let _v = native(_chainid)\n                if(_v != undefined) {\n                    earnImg.src = _v.logo;\n                    earnName.innerHTML = \"Earn <b>\" + _v.symbol + \"</b>\"\n                }\n            }\n            else {\n                //use default image\n                earnImg.src = Logo\n                earnName.innerHTML = \"Earn <b>\" + d._pool.rewardTokenInfo.symbol + \"</b>\"\n            }\n\n            const a = E(`stake_my_pool_view_${d._pool.poolId}`) as HTMLDivElement\n            a.onclick = () => {\n                goToStakePool(d._pool.poolId)\n            }\n            \n        }\n    })\n}\nconst stakeView = (d: any) => {\n//    const yield = d.yield / \n//    let msg: any = d.yield + \"\";\n//    if(d.yieldType == 1) { if(d.yield * 1 msg += \" unit\"}\n      let msg: any;let ymsg: any; if(d._pool.stakers == 1){msg = (Intl.NumberFormat('en-US', {maximumSignificantDigits: 6}).format(d._pool.stakers)) + \" Staker\"}else if(d._pool.stakers > 1) {msg = (Intl.NumberFormat('en-US', {maximumSignificantDigits: 6}).format(d._pool.stakers)) + \" Stakers\"} else {msg = \"\"}\n      let myStake: any =  (Intl.NumberFormat('en-US', {maximumSignificantDigits: 6}).format(d.totalStaked / (Math.pow(10,d._pool.stakeTokenInfo.decimal * 1))))\n      let Rewards: any =  (Intl.NumberFormat('en-US', {maximumSignificantDigits: 6}).format(d.reward / (Math.pow(10,d._pool.rewardTokenInfo.decimal * 1))))\n      let totalStaked: any =  (Intl.NumberFormat('en-US', {maximumSignificantDigits: 6}).format(d._pool.totalStaked / (Math.pow(10,d._pool.stakeTokenInfo.decimal * 1))))\n      let _yield: any =  (Intl.NumberFormat('en-US', {maximumSignificantDigits: 6}).format(d._pool.yield / (Math.pow(10,d._pool.rewardTokenInfo.decimal * 1))))\n      if(d._pool.yieldType == 1) {ymsg = _yield + \" units per 1\" + (d._pool.stakeTokenInfo.symbol || native(_chainid)?.symbol) + \" \"}else {ymsg = _yield + \"% \"}\n      if(d._pool.yieldDuration == 1) {ymsg += \"daily yield\"}else if(d._pool.yieldDuration == 2) {ymsg += \"weekly yield\"}\n      else if(d._pool.yieldDuration == 3) {ymsg += \"monthly yield\"}else if(d._pool.yieldDuration == 4) {ymsg += \"yearly yield\"}\n      loadTokenInfo(d)\n   return `<div id='stake_my_pool_view_${d._pool.poolId}' class='topGravity stake_pool' >\n    <div class='leftGravity stake_pool_top'>\n        <span>Pool${d._pool.poolId}</span>\n    </div>\n    <div class='leftGravity'>\n        <div class='leftGravity stake_div'>\n            <div class='leftGravity centre '>\n                <img id='stake_my_pool_view_stakeimg_${d._pool.poolId}'  class='stake_icon circle' />\n                <img id='stake_my_pool_view_earnimg_${d._pool.poolId}'  class='stake_earn_icon circle' />\n            </div>\n            <div class='topGravity stake_token_font'>\n                <span id='stake_my_pool_view_stakename_${d._pool.poolId}'></span>\n                <span id='stake_my_pool_view_earnname_${d._pool.poolId}' style='color:limegreen'></span>\n            </div>\n        </div>\n        <div class='leftGravity stake_token_font stake_div'>\n            <div class='topGravity stake_div_div'>\n                <span style='fontSize:12px'>Your Stake</span>\n                <span class='staked_amount'>${myStake} ${d._pool.stakeTokenInfo.symbol || native(_chainid)?.symbol}</span>\n            </div>\n        </div>\n        <div class='leftGravity stake_token_font stake_div'>\n            <div class='topGravity stake_div_div'>\n                <span style={{fontSize:'12px'}}>Reward earned</span>\n                <span class='staked_amount' style='color:limegreen'>${Rewards} ${d._pool.rewardTokenInfo.symbol || native(_chainid)?.symbol}</span>\n            </div>\n        </div>\n        <div class='leftGravity stake_token_font stake_div'>\n            <div class='topGravity stake_div_div'>\n                <span style='fontSize:12px'>Total Staked</span>\n                <span class='staked_amount'>${totalStaked} ${d._pool.stakeTokenInfo.symbol || native(_chainid)?.symbol}</span>\n            </div>\n        </div>\n        \n    </div>\n    <div class='leftGravity stake_pool_bottom'>\n        <span style='margin-left:auto; margin-right:10px'>${msg}</span>\n        <span>${ymsg}</span>\n    </div>\n    </div>`\n\n}\nconst goToStakePool = (id: any) => { \n    window.location.href = \"#/stakeview?id=\" + id\n}\nconst empty = () => {\n    return `<div class='stake_empty' style='margin-top:32px'>\n    You have not set up a staking pool. To begin your own staking pool, click the \"Create Stake Pool\" button.\n        </div>`    \n}\n\nconst MyPool: React.FC<{}> = (): React.ReactElement => {\n    const { account, chainId } = useActiveWeb3React()\n    _chainid = chainId; \n    tokens = useAllTokens();\n    \n    return (\n      <>\n      <div id='stake_my_pool' style={{display:'none'}}>\n      <div id='stake_my_pool_info'>\n        {!account ? (\n            <OutlineCard marginTop=\"60px\">\n                    <TYPE.body fontSize=\"14px\" lineHeight=\"17px\" textAlign=\"center\">\n                      Connect to a wallet to view stake pool.\n                    </TYPE.body>\n            </OutlineCard>\n        ): (\n             \n            <div className='stake_loading'>\n                    <span className='fas fa-spinner fa-spin' style={{marginRight:'15px'}}></span>\n                    <span>Fetching your staking pools</span>\n            </div>\n        )}\n        </div>\n        <div id='stake_my_pool_results' style={{display:'none'}}></div>\n     </div>\n      </>\n    )\n}\n\nexport {MyPool, _init, filterData, sortData};","import React, { ReactElement, useCallback, useContext, useEffect, useMemo, useState, MouseEvent } from 'react'\nimport './stake.css'\nimport { AutoColumn } from '../../components/Column'\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\nimport {\n    useDefaultsFromURLSearch,\n    useDerivedSwapInfo,\n    useSwapActionHandlers,\n    useSwapState\n  } from '../../state/swap/hooks';\nimport { Field } from '../../state/swap/actions'\nimport useWrapCallback, { WrapType } from '../../hooks/useWrapCallback'\nimport { CurrencyAmount, JSBI, Trade, Token, RoutablePlatform, Currency } from 'dxswap-sdk'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { useActiveWeb3React } from '../../hooks'\nimport styled, { ThemeContext } from 'styled-components'\nimport { Repeat, Lock, Unlock, ChevronDown } from 'react-feather'\nimport { ButtonError, ButtonPrimary, ButtonConfirmed } from '../../components/Button'\nimport { onToggle, E, readErrorMessage, onRender, toBig, native } from '../../components/utility';\nimport _ from 'lodash';\nimport { useWalletModalToggle } from '../../state/application/hooks';\nimport {ethers} from \"ethers\";\nimport Web3 from 'web3';\nimport abi from './functions/abi';\nimport config from './functions/config';\nimport { WrappedTokenInfo } from '../../state/lists/hooks';\nimport { ModalInfo, showModalInfo, setModalMsg, setModalStaus } from '../../components/infomodal';\n//variables declration\nlet _stakeToken: any = \"\"; let _rewardToken: any; let _liquidity: any = '0';\nlet _rewardTokenDecimal: any; let _rewardTokenSymbol: any;let _yieldType: any = '1'; let _yieldDuration: any = 'daily'\nlet _yield: any = '0'; let _duration: any = 0; let _ether: any; let _account: any;let _chainid: any;\nlet _tmr: any;let _isAllowed: any = 'false'; let _balance: any = '0'; let hasCreated: boolean = false //to know if a new pool was created \nconst zeroAddress = \"0x0000000000000000000000000000000000000000\"; let _creationFee: any = 0;\nlet createHooks: any = [];  let useOne: boolean = false;\nconst getAllowed = (_tokenAddress: any) => {\n  let _Address: any = config.chains[_chainid] as unknown as JSON | null\n  if(_Address != null) {\n    let _stakeAddress: any = _Address.stake as any | \"\"\n    const token = new ethers.Contract(_tokenAddress, abi.token, _ether);\n    return token.allowance(_account,  _stakeAddress as any | \"\")\n    .then((_res: any)=> {   \n      return _res\n    })\n  }\n  else{return false}\n}\nconst getCreationFee = () => {\n  let _Address: any = config.chains[_chainid] as unknown as JSON | null\n  if(_Address != null) {\n    let _stakeAddress: any = _Address.stake as any | \"\"\n    const token = new ethers.Contract(_stakeAddress, abi.stake, _ether);\n    return token.CREATION_FEE()\n    .then((_res: any)=> {   \n      return _res\n    })\n  }\n  else{return false}\n}\nconst grantPermission = () => {\n  let _Address: any = config.chains[_chainid] as unknown as JSON | null\n  if(_Address != null) {\n    let _stakeAddress: any = _Address.stake as any | \"\"\n    const signer = _ether.getSigner();\n    const token = new ethers.Contract(_rewardToken, abi.token, signer);\n   return token.approve(_stakeAddress,  Web3.utils.toWei('9000000000000000000'))\n   .then((_res: any)=> {  \n        return _res;      \n    })\n  }\n  else {return false}\n}\nconst createPool = (_liquid: any, yield_tmp:any, yield_dur: any) => {\n  let _Address: any = config.chains[_chainid] as unknown as JSON | null\n  if(_Address != null) {\n    let _stakeAddress: any = _Address.stake as any | \"\"\n    const signer = _ether.getSigner();\n    const stake = new ethers.Contract(_stakeAddress, abi.stake, signer);\n    let a: any;  \n    let n = Web3.utils.toBN(_liquid + \"\")\n    let p = Web3.utils.toBN(_creationFee);\n    n = n.add(p)\n    if(useOne) {\n      //using one address\n      _stakeToken = _rewardToken;\n    }\n    if(_rewardToken != zeroAddress) {\n        a = stake.createPool(_rewardToken, _stakeToken, Web3.utils.toWei(_liquid + \"\", 'wei'), Web3.utils.toWei(yield_tmp + \"\", 'wei'), _yieldType, yield_dur, _duration, {value: _creationFee.toString()})\n    }else {a = stake.createPool(_rewardToken, _stakeToken, Web3.utils.toWei(_liquid + \"\", 'wei'), Web3.utils.toWei(yield_tmp + \"\", 'wei'), _yieldType, yield_dur, _duration, {value: n.toString()})}\n    return a.then((_res: any)=> {  \n        return _res;      \n    })\n  }\n  else {return false}\n}\nconst vaidateStakeData = () => { \n    _liquidity =  getInputValue('stake-input-token')\n    let yiel: any;\n    if(_rewardToken != zeroAddress) {\n      yiel = Math.floor(_yield * Math.pow(10,_rewardTokenDecimal))\n      } else {yiel = Math.floor(_yield * 1E18)}\n     \n    if(useOne) {\n      //using one address\n      _stakeToken = _rewardToken;\n    }\n    if(_stakeToken == null || _stakeToken == undefined || _stakeToken == \"\") {\n      return [false, \"Choose a token to use for staking.\"]\n    }\n    else if(_rewardToken == null || _rewardToken == undefined) {\n      return [false, \"choose the reward token to be earned.\"]\n    }\n    else if((_liquidity * 1) == 0) {\n        return [false, \"Indicate the liquidity amount.\"]\n    }\n    else if((_liquidity * 1) < 0) {\n      return [false, \"Liquidity amount cannot be negative\"]\n    }\n    else if((_duration * 1) < 0) {\n      return [false, \"Duration value cannot be negative\"]\n    }\n    else if((_yield * 1) == 0){\n      return [false, \"Indicate the yield value.\"]\n    }\n    else if((_yield * 1) < 0){\n      return [false, \"Yield value cannot be negative.\"]\n    }\n    else if((yiel * 1) == 0){\n      return [false, \"Yield value is too small.\"]\n    }\n    else if(_duration < 1) {\n      return [false, \"Specify the duration\"]\n    }\n    else if((_liquidity * 1) < (_yield * 1)) {\n      return [false, \"The yield amount cannot exceed the liquidity.\"]\n    }\n    else if((_balance * 1) < (_liquidity * 1)) {\n      return [false, \"Insufficient balance to provide for the desired liquidity.\"]\n    }\n    else if((_balance * 1) == 0) {\n      return [false, \"Insufficient balance\"]\n    }\n    \n    return [true]   \n}\nconst getInputValue = (_id: any) => {\n   const _div = E(_id) as HTMLDivElement | null\n   if(_div != null) {\n       //find the input field in it\n       const _res = _div.querySelector('input')\n       if(_res != null){return _res.value}\n   }\n   return \"\"\n}\nconst hasCreatedNew = (_callback: Function) => {\n  if(_callback != null){createHooks.push(_callback)}\n}\nconst callHooks = () => {\n  if(createHooks.length > 0 && hasCreated) {\n    hasCreated = false\n      createHooks.forEach((callback:any) => {\n          callback()\n      });\n      hasCreated = false\n  }\n}\nconst checkCurrencyAllowed = (_address: any, _tokenSymbol: any) => {\n  if(_account) { \n    const stake_button = E('stake_button') as HTMLButtonElement | null\n    //check if button is loaded and if its re-doing itself\n    if(stake_button != null && _address != _rewardToken) {\n      stake_button.disabled = true //disable stake button from default\n      stake_button.innerHTML = \"...\"\n      _isAllowed = 'false'; \n      if(_address != zeroAddress && _address != \"\"){\n        let a = getAllowed(_address)\n        if(a != false) {\n          a.then((res: any) => {  \n              stake_button.disabled = false\n                if(res > 0) {\n                  stake_button.innerHTML = \"Create\"\n                  _isAllowed = 'true'\n                }\n                else {\n                  stake_button.innerHTML = \"Grant access to \" + _tokenSymbol\n                }\n          })\n        }\n      } \n      else if(_address == zeroAddress){ \n        //using native currency\n        stake_button.innerHTML = \"Create\"\n        stake_button.disabled = false\n        _isAllowed = 'true'\n      }\n    }\n  }\n}\nconst showCreateStake = () => { \n  //to show create stake pool\n  onRender('stake_yield_type', () => { \n      //reset some things\n      _liquidity  = '';_yieldType  = '1'; _yieldDuration = 'daily'\n      _yield = '0';_duration = 0;\n      if(_rewardToken != null) {\n        let tmp = _rewardToken;  _rewardToken = \"\"\n        checkCurrencyAllowed(tmp, _rewardTokenSymbol)\n      }\n  })       \n}\nconst myPrompt = (msg:any, callback: Function) => {\n  //to call the prompt and get user info\n  (E('stake_prompt') as HTMLDivElement).style.display = 'flex';\n  const _t = (E('stake_prompt_msg') as HTMLDivElement)\n  _t.innerHTML = msg;\n  //configuring button\n  (E('stake_prompt_yes') as HTMLDivElement).onclick = () => {\n    (E('stake_prompt') as HTMLDivElement).style.display = 'none';\n    callback(true)\n  }\n  (E('stake_prompt_no') as HTMLDivElement).onclick = () => {\n    (E('stake_prompt') as HTMLDivElement).style.display = 'none';\n    callback(false)\n }\n}\nconst Create: React.FC<{}> = (): React.ReactElement => {\n    const theme = useContext(ThemeContext); \n    const { account, chainId, library } = useActiveWeb3React()\n    _ether = library;  _account = account;_chainid = chainId\n    const toggleWalletModal = useWalletModalToggle()\n    if(chainId != null) { \n     try{ \n      let _tmp = getCreationFee();\n      if(_tmp !== false){ \n        _tmp.then((amt) => {\n          _creationFee = amt\n        })\n      }\n     }catch(e){}\n    }\n    const [loading, setLoading] = useState<boolean>(false);\n    const [_useOne, setUseOne] = useState<boolean>(false);\n    useOne = _useOne;\n    const [platformOverride, setPlatformOverride] = useState<RoutablePlatform | null>(null)\n    const { independentField, typedValue, recipient } = useSwapState()\n    const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\n    const { onCurrencySelection, onUserInput } = useSwapActionHandlers();\n    const {\n        trade: potentialTrade,\n        allPlatformTrades,\n        currencyBalances,\n        parsedAmount,\n        currencies,\n        inputError: swapInputError\n      } = useDerivedSwapInfo(platformOverride || undefined)\n      const { wrapType, execute: onWrap, inputError: wrapInputError } = useWrapCallback(\n        currencies[Field.INPUT],\n        currencies[Field.OUTPUT],\n        typedValue\n    );\n    const maxAmountOutput: CurrencyAmount | undefined = maxAmountSpend(currencyBalances[Field.OUTPUT], chainId)\n    const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\n    const trade = showWrap ? undefined : potentialTrade;\n    const parsedAmounts = showWrap\n    ? {\n        [Field.INPUT]: parsedAmount,\n        [Field.OUTPUT]: parsedAmount\n        }\n    : {\n        [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\n        [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount\n        }\n      const formattedAmounts = {\n        [independentField]: typedValue,\n        [dependentField]: showWrap\n          ? parsedAmounts[independentField]?.toExact() ?? ''\n          : parsedAmounts[dependentField]?.toSignificant(6) ?? ''\n    }\n    //to select currency\n    const getCurrencyValue = (v: any) => {\n      if(v){\n        if(v.address){\n          return [v.address, v.symbol, v.decimals];\n        }else if(v.symbol){\n          return [zeroAddress, v.symbol, v.decimals];\n        }else{\n          return ['','', 18];\n        }\n      }\n      else {\n        return ['','', 18];\n      }\n    }\n    const handleInputSelect =  useCallback(\n      inputCurrency => {\n        setPlatformOverride(null) // reset platform override, since best prices might be on a different platform\n        onCurrencySelection(Field.INPUT, inputCurrency)\n      },\n      [onCurrencySelection]\n    )\n    const handleOutputSelect = useCallback(\n      outputCurrency => {\n        setPlatformOverride(null) // reset platform override, since best prices might be on a different platform\n        onCurrencySelection(Field.OUTPUT, outputCurrency)\n      },\n      [onCurrencySelection]\n    )\n    const handleTypeInput = () => {}\n    const handleTypeOutput = useCallback(\n      (value: any) => {\n        onUserInput(Field.OUTPUT, value)\n        _liquidity = value\n      },\n      [onUserInput]\n    )\n    const handleMaxOuput = useCallback(() => {\n      maxAmountOutput && onUserInput(Field.OUTPUT, maxAmountOutput.toExact())\n      if(maxAmountOutput != undefined){\n        let value = maxAmountOutput.toExact() as any | null\n        _liquidity = value;\n         //console.log(_liquidity)\n      }\n    }, [maxAmountOutput, onUserInput])\n    //this gets the seller and buyers address\n    let [stakeAddress, rewardAddress] = useMemo(() => {\n    return Object.values(currencies).map(v => { \n          return getCurrencyValue(v);\n    });\n    }, [currencies['INPUT'], currencies['OUTPUT']])\n    checkCurrencyAllowed(rewardAddress[0], rewardAddress[1])\n    _rewardToken = rewardAddress[0]; _stakeToken = stakeAddress[0];\n    _rewardTokenDecimal = rewardAddress[2]; _rewardTokenSymbol = rewardAddress[1]\n    if(maxAmountOutput != null) {\n      _balance = maxAmountOutput.toExact()\n    }\n     onToggle(\"stake_yield_type\", (_value: any) => {\n      const stake_yield_msg = E('stake_yield_msg')\n      if(stake_yield_msg != null) {\n      _value = _value.toLowerCase()\n        if(_value == ' units') {\n           _yieldType = '1'\n           stake_yield_msg.innerHTML = \"Rewards would be accumulated based on  units\"\n        }\n        else {\n          _yieldType = '0'\n          stake_yield_msg.innerHTML = \"Rewards would be accumulated based on percentage\"\n        }\n        showMsg(_yieldDuration, _value, _yield)\n      }\n    })\n    onToggle(\"stake_yield_duration\", (_value: any) => {\n      const stake_yield_msg = E('stake_yield_duration_msg')\n      if(stake_yield_msg != null) {\n      _value = _value.toLowerCase(); \n        _yieldDuration = _value\n        showMsg(_value, _yieldType, _yield)\n      }\n    })\n    const showMsg = (_value: any, _value1: any, _value3: any) => {\n        let msg: any; let msg2: any; \n        const stake_yield_msg = E('stake_yield_duration_msg')\n        const _yield_msg = E('_yield_msg')\n        if(_yieldType == '1') {msg = \" units\";msg2=\" units * \"}else {msg=\"percentage\"; msg2 = \"% of the\"}\n        if(stake_yield_msg != null && _yield_msg != null) {  \n          if(_value == 'daily') {  \n              stake_yield_msg.innerHTML = \"Rewards would be accumulated based on \" + msg + \" per day\"\n              _yield_msg.innerHTML = \"Reward = \" + _value3 + \"\" + msg2 + \" staked token per day\"  \n          }\n          else if(_value == 'weekly') {\n            stake_yield_msg.innerHTML = \"Rewards would be accumulated based on \" + msg + \" per week\"\n            _yield_msg.innerHTML = \"Reward = \" + _value3 + \"\" + msg2 + \" staked token per week\"  \n          }\n          else if(_value == 'monthly') {\n              stake_yield_msg.innerHTML = \"Rewards would be accumulated based on \" + msg + \" per month\"\n              _yield_msg.innerHTML = \"Reward = \" + _value3 + \"\" + msg2 + \" staked token per month\"  \n            }\n          else if(_value == 'yearly') {\n              stake_yield_msg.innerHTML = \"Rewards would be accumulated based on \" + msg + \" per year\"\n              _yield_msg.innerHTML = \"Reward = \" + _value3 + \"\" + msg2 + \" staked token per year\"  \n          } \n        }\n\n    }\n    const onYieldInput = () => {\n      const stake_yield_input = E('stake_yield_input') as HTMLInputElement | null\n      if(stake_yield_input != null) {\n        const _value: any = stake_yield_input.value as any\n        _yield = _value\n        showMsg(_yieldDuration, _yieldType, _value)\n      }\n    }\n    const onEndInput = () => {\n      const stake_end_input = E('stake_end_input') as HTMLInputElement | null\n      if(stake_end_input != null) {\n        const _value: any = stake_end_input.value as any\n        _duration = _value\n        //console.log(_duration)\n      }\n    }\n    const switchOneToMany = () => {\n      if(useOne){\n        _stakeToken = \"\";\n      }\n      setUseOne(!useOne)\n    }\n    const doButtonAction = () => { \n        //for button actions\n        if(_isAllowed == 'false') { \n            //grant permission function\n            const stake_button = E('stake_button') as HTMLButtonElement | null\n            let a: any = grantPermission();try{clearTimeout(_tmr)}catch(e){}\n            if(a != false && stake_button != null) {\n              showModalInfo(true);setModalMsg('Transacting');setModalStaus('')\n              stake_button.disabled = true\n              a.then((tx: any) => { \n                if(tx.hash) {\n                    tx.wait()\n                    .then((res: any) => {\n                      stake_button.disabled = false; _tmr = setTimeout(() => {showModalInfo(false)}, 3000)\n                      if(res.status == 1) {\n                        stake_button.innerHTML = \"Create\"\n                        setModalMsg(\"Permission granted\")\n                        setModalStaus('good')\n                        _isAllowed = 'true'\n                      }\n                      else{\n                        //transaction failed\n                        setModalStaus('error');setModalMsg(\"Transaction failed\")\n                      }\n                    })\n                    .catch((err: any) => {\n                        setModalStaus('error')\n                        setModalMsg(readErrorMessage(err))\n                        _tmr = setTimeout(() => {showModalInfo(false)}, 4000)\n                    })\n                  }\n              })\n              .catch ((err: any) => {\n                  setModalStaus('error')\n                  setModalMsg(readErrorMessage(err))\n                  _tmr = setTimeout(() => {\n                    showModalInfo(false)\n                  }, 4000)\n                  stake_button.disabled = false\n              })\n            }\n        }\n        else if(_isAllowed == 'true') {\n           //can do the needfull, first validate\n           const _a = vaidateStakeData()\n           const stake_button = E('stake_button') as HTMLButtonElement | null\n           if(_a[0] && stake_button != null) {\n              //successfull, now deploy. Prepare the inputs\n              let liquid: any; let yiel: any; let yd: any\n              if(_rewardToken != zeroAddress) {\n                  liquid = toBig(_liquidity, _rewardTokenDecimal)\n                  yiel = toBig(_yield,_rewardTokenDecimal)\n              } else {\n                  liquid = toBig(_liquidity, 18)\n                   yiel = toBig(_yield,18)\n              }\n                //do prompt\n                const msg = \"You would be charged <span style='color:yellow'>\" + (_creationFee / 10E18) + \" \" + native(chainId)?.symbol + \"</span> for this operation.\"\n                myPrompt(msg, (_choice: Boolean) => {\n                  if(_choice) {\n                    //format yield duration\n                    if(_yieldDuration == 'daily') {yd = '1'}else if(_yieldDuration == 'weekly'){yd = '2'}else if(_yieldDuration == 'monthly') {yd = '3'} else {yd = '4'}\n                    let a = createPool(liquid, yiel, yd);try{clearTimeout(_tmr)}catch(e){}\n                    if(a != false) {\n                      showModalInfo(true);setModalMsg('Creating pool');setModalStaus('')\n                      stake_button.disabled = true\n                      a.then((tx: any) => { \n                        if(tx.hash) {\n                            tx.wait()\n                            .then((res: any) => {\n                              stake_button.disabled = false; _tmr = setTimeout(() => {showModalInfo(false)}, 3000)\n                              if(res.status == 1) {\n                                stake_button.innerHTML = \"Create\"\n                                setModalMsg(\"Staking pool Created\")\n                                setModalStaus('good')\n                                hasCreated = true\n                              }\n                              else{\n                                //transaction failed\n                                setModalStaus('error');setModalMsg(\"Transaction failed\")\n                              }\n                            })\n                            .catch((err: any) => {\n                                setModalStaus('error')\n                                setModalMsg(readErrorMessage(err))\n                                _tmr = setTimeout(() => {showModalInfo(false)}, 4000)\n                            })\n                          }\n                      })\n                      .catch ((err: any) => {\n                          setModalStaus('error')\n                          setModalMsg(readErrorMessage(err))\n                          _tmr = setTimeout(() => {\n                            showModalInfo(false)\n                          }, 4000)\n                          stake_button.disabled = false\n                      })\n                    }\n                  }\n                })\n           }\n           else{\n              //didn't pass validation check\n              showModalInfo(true);setModalStaus('error');setModalMsg(_a[1])\n              try{clearTimeout(_tmr)}catch(e){}\n              _tmr = setTimeout(() => {showModalInfo(false)}, 3000)\n           }\n        }\n    }\n    const hideCreateModal = () => {\n      const _c = E('stake_create') as HTMLDivElement | null\n      if(_c != null) {\n        _c.style.display = 'none'\n        callHooks()\n      }\n\n    }\n    // onRender('stake_create', () => {\n    // })\nreturn (\n      <>\n      \n        <div id='stake_create' className='stake_overlay' style={{display:'none'}}>\n           <div className='stake_modal topGravity'>\n             <div onClick={hideCreateModal} className='stake_cancel'><span className='fas fa-times'></span></div>\n             <span className='' style={{margin:'15px', fontSize:'18px'}}>Create Stake Pool</span>\n             <div className='stake_modal_display'>   \n             <section className='stake_option_section' style={{border:'0px'}}>\n                 {useOne ? (\n                       <ButtonPrimary onClick={switchOneToMany}>use seperate token for stake and reward</ButtonPrimary>\n                   ):\n                   (\n                    <ButtonPrimary onClick={switchOneToMany}>use one token for stake and reward</ButtonPrimary>\n                   )}\n             </section>\n             \n              <section className='stake_option_section'>\n              {useOne ? (\n                      <span className='stake_token_font span' style={{color:'yellow'}}>Using same token as rewards</span>\n                      ):\n                   (\n                    <div>\n                    <span className='stake_token_font span'>Select stake token</span>\n                    <CurrencyInputPanel\n                      label=\"\"\n                      value={formattedAmounts[Field.INPUT]}\n                      showMaxButton={true}\n                      hideInput ={true}\n                      onUserInput={handleTypeInput}\n                      onCurrencySelect={handleInputSelect}\n                      currency={currencies[Field.INPUT]}\n                      otherCurrency={currencies[Field.OUTPUT]}\n                      id=\"swap-currency-input\"\n                    />\n              \n                    </div>\n                     )}\n                </section>\n                <section className='stake_option_section'>\n                    <span className='stake_token_font span'>Select Reward token and add liquidity</span>\n                    <div>\n                   <CurrencyInputPanel\n                      label=\"\"\n                      value={formattedAmounts[Field.OUTPUT]}\n                      showMaxButton={true}\n                      onUserInput={handleTypeOutput}\n                      onMax={handleMaxOuput}\n                      onCurrencySelect={handleOutputSelect}\n                      currency={currencies[Field.OUTPUT]}\n                      otherCurrency={currencies[Field.OUTPUT]}\n                      id=\"stake-input-token\"\n                    />\n                    </div>\n                </section>\n                <section className='stake_option_section'>\n                    <span className='stake_token_font span'>Yield type</span>\n                    <div> \n                      <div id='stake_yield_type' className='stake_toggle' style={{marginLeft:'10px'}}>\n                        <div className='stake_toggle_select'> units</div>\n                        <div>Percentage</div>\n                      </div>\n                    </div>\n                    <span  id='stake_yield_msg' className='msg'>Rewards would be accumulated based on  units</span>\n                </section>\n                <section className='stake_option_section'>\n                    <span className='stake_token_font span'>Yield duration</span>\n                    <div> \n                      <div id='stake_yield_duration' className='stake_toggle' style={{marginLeft:'10px'}}>\n                        <div className='stake_toggle_select'>Daily</div>\n                        <div>Weekly</div>\n                        <div>Monthly</div>\n                        <div>Yearly</div>\n                      </div>\n                    </div>\n                    <span id='stake_yield_duration_msg' className='msg'>Reward would be accumulated based on uints per day</span>\n                </section>\n                <section className='stake_option_section'>\n                    <span className='stake_token_font span'>Yield value</span>\n                    <div> \n                     <input onInput={onYieldInput} id='stake_yield_input' type='number' className='input' placeholder='0.0'  />\n                    </div>\n                    <span id='_yield_msg' className='msg'></span>\n                </section>\n                <section className='stake_option_section'>\n                    <span className='stake_token_font span'>Duration in days</span>\n                    <div> \n                     <input onInput={onEndInput} id='stake_end_input' type='number' className='input' placeholder='set duration'  />\n                    </div>\n                </section>\n                <section className='stake_option_section' style={{border:'0px'}}>\n                   {!account ? (\n                       <ButtonPrimary onClick={toggleWalletModal}>Connect Wallet</ButtonPrimary>\n                   ):\n                   (\n                    <ButtonPrimary onClick={doButtonAction} id='stake_button'>...</ButtonPrimary>\n                   )}\n                  \n             </section>\n             </div>\n           </div>\n        </div>\n        <ModalInfo/>\n        <div id='stake_prompt' className='stake_create_back'>\n                <div className='stake_create_back_div'>\n                    <div id='stake_prompt_msg' className='stake_create_back_text'>You would be charged 0.5BNB for this operation.</div>\n                    <div>\n                       <button id='stake_prompt_yes' className='stake_confirm'>Confirm</button>\n                       <button id='stake_prompt_no' className='stake_other_cancel'>Cancel</button>\n                    </div>\n                </div>\n        </div>\n      </>\n    )\n}\n\n  export { Create, hasCreatedNew, showCreateStake};","import React, { useEffect, useState } from 'react'\nimport {onRender} from '../../components/utility'\nimport './stake.css'\nimport {Pool, _filterData, _init_, _sortData} from './pool'\nimport {MyPool, _init, filterData, sortData} from './mypool'\nimport {Create, hasCreatedNew, showCreateStake} from './create'\nimport {ethers} from \"ethers\";\nimport abi from './functions/abi';\nimport config from './functions/config';\nimport { useActiveWeb3React } from '../../hooks'\nimport { ModalInfo } from '../../components/infomodal';\nimport { onToggle, E, Toggle} from '../../components/utility'\nimport { useAllTokens, useCurrency } from '../../hooks/Tokens'\nimport { OutlineCard } from 'src/components/Card'\nimport { TYPE } from 'src/theme'\nlet _chainid: any; let _wallet: any; let _ether:any; let allTokens: any = {};let _view: any = 0;\nlet stakeMyData: any = null;let stakeData: any = null; let _filter: any = {\n  live:true, finished:false,\n  staked:false, all: true\n}\n\n//functions declaration\nconst selectView = (_viewNo: number) => {\n  //reset all views first\n  try{\n  const _stakeViews = document.getElementById('stake_head')\n  let _stakeViewChild = document.getElementById('stake_view') as HTMLDivElement | null\n  if(_stakeViews != null && _stakeViewChild != null){ \n      let stakeViewChild = _stakeViewChild.children as HTMLCollectionOf<HTMLElement> | null\n      if(stakeViewChild != null) {\n          for(let i=0;i<_stakeViews.children.length;i++) {\n            _stakeViews.children[i].className = \"\"\n            stakeViewChild[i].style.display = 'none'\n          }\n          _stakeViews.children[_viewNo].className = \"stake_head_selected\"\n          //switch view\n          stakeViewChild[_viewNo].style.display = \"\"\n          _view = _viewNo\n       }\n   }\n  }catch(e){}\n}\nconst getStakeData = () => {\n    let _Address: any = config.chains[_chainid] as unknown as JSON | null\n    if(_Address != null) { \n      let _stakeAddress: any = _Address.stake as any | \"\"\n      const _stake = new ethers.Contract(_stakeAddress, abi.stake, _ether);\n      return _stake.getPoolWithUser(_wallet)\n      .then((_res: any)=> { \n        return _res\n      })\n    }\n    else {return false}\n}\nconst loadData = () => { \n  stakeData = null;stakeMyData = null;\n  let _data = getStakeData()\n  if(_data != false){\n    _data.then((res: any) => {   \n        //reset search field\n        const value = (E('stake_search_input') as HTMLInputElement)\n        if(value != null){value.value = \"\"}\n        //loop through and seperate\n        let _pool = []; let _mypool = []\n        for(let i=0;i<res.length;i++) {\n            if(res[i]._pool.owner == _wallet) {\n                _mypool.push(res[i])\n            }\n            else{\n              _pool.push(res[i])\n            }\n        }\n        stakeData = _pool;stakeMyData = _mypool;\n       \n        _init(_mypool, _filter, getSortData())\n        _init_(_pool, _filter, getSortData())\n    })\n    .catch((err :any) => {\n      //reload every 2 sec\n      setTimeout(() => {loadData()}, 2000)\n    })\n  }\n}\nconst showCreateStaked = () => {\n    const stake_create = document.getElementById('stake_create')\n    if(stake_create != null) stake_create.style.display = \"\"\n    showCreateStake();\n}\nconst getSortData = () => {\n  const value = (E('stake_sort_type') as HTMLInputElement)?.className\n  let _sortData = {sortType:'', sortBy:''}\n  if(value.indexOf('down') > -1) {\n    _sortData.sortType = 'down'\n  }\n  else{  _sortData.sortType = 'up'}\n  _sortData.sortBy = (E('stake_sort_by') as HTMLInputElement)?.value\n  return _sortData;\n}\nconst Stake: React.FC<{}> = (): React.ReactElement => {\n    const { account, chainId, library } = useActiveWeb3React()\n   _ether = library; const tokens = useAllTokens();\n   \n   //configuring the toggle\n   onToggle('stake_toggle_filter', (_value:any) => {\n      if(_value == 'Live') {\n        _filter.live = true;_filter.finished = false;\n      }\n      else {\n        _filter.live = false;_filter.finished = true;\n      }\n      //reload data\n      const value = (E('stake_search_input') as HTMLInputElement)?.value\n      if(stakeData != null || stakeMyData != null){\n        filterData(_filter, value)\n         _filterData(_filter, value)\n      }\n   })\n   onToggle('stake_toggle_filter_1', (_value:any) => {\n    if(_value == 'Staked') {\n      _filter.staked = true;_filter.all = false;\n    }\n    else {\n      _filter.staked = false;_filter.all = true;\n    }\n    //apply filter\n    const value = (E('stake_search_input') as HTMLInputElement)?.value\n    if(stakeData != null || stakeMyData != null){\n      filterData(_filter, value)\n      _filterData(_filter, value)\n    }\n   })\n   const onSearch = () => {\n     const value = (E('stake_search_input') as HTMLInputElement)?.value\n     if(stakeData != null || stakeMyData != null){\n       filterData(_filter, value);\n       _filterData(_filter, value)\n     }\n   }\n   const onSortType = () => {\n    const value = (E('stake_sort_type') as HTMLInputElement)\n    if(value != null) {\n        if(value.className.indexOf('down') > -1) {\n            //sorting downwards\n            value.className = \"fas fa-arrow-up\"\n        }\n        else if(value.className.indexOf('up') > -1) {\n          //sorting downwards\n          value.className = \"fas fa-arrow-down\"\n      }\n      if(stakeData != null || stakeMyData != null){\n           sortData(getSortData(), true)\n          _sortData(getSortData(), true)\n      }\n    }\n   }\n   const onSortBy = () => {\n     if(stakeData != null || stakeMyData != null){\n         sortData(getSortData(), true)\n        _sortData(getSortData(), true)\n     }\n   }\n   useEffect(() => {\n    // Reset variables\n    allTokens = {}; \n   });\n   const init = () => {\n    onRender('stake_view', () => {  \n        selectView(_view);\n         \n        if(account != null && chainId != null && JSON.stringify(tokens) != '{}') { \n          if(_wallet != account || _chainid != chainId || JSON.stringify(allTokens) != JSON.stringify(tokens)) { \n            //configure the global variables\n           allTokens = tokens;_wallet = account; _chainid = chainId; \n            loadData();  \n            //do toggle\n            if(_filter.live) {Toggle('stake_toggle_filter',0)} else {Toggle('stake_toggle_filter',1)}\n            if(_filter.staked) {Toggle('stake_toggle_filter_1',0)} else {Toggle('stake_toggle_filter_1',1)}\n          }\n        }\n    })\n   } \n   //hooking to New pool created\n   hasCreatedNew(() => {  \n    onRender('stake_view', () => {  \n      if(account != null && chainId != null) { \n            loadData()\n      }\n    })\n   })\n    return (\n\n      <>\n       \n        \n        <div className=\"bg-image\"></div>\n        <div className=\"dxstake\" >\n        <div className=\"stakeContainer\">\n            <div className='topStakeBar'>\n                <span className='stake_bold' style={{marginRight:'auto', fontSize:'20px'}}>Staking Pool</span>\n                <button onClick={showCreateStaked} className='stake_button'>Create Stake Pool</button>\n                <input onInput={onSearch} id='stake_search_input' placeholder='Search by token, id' className='stake_input'  />\n          </div>\n            <div className='stake_head' id='stake_head'>\n                <button onClick={()=> selectView(0)} style={{borderRight:'1px solid white'}}>Pool</button>\n                <button onClick={()=> selectView(1)} className=''>My Pool</button>\n            </div>\n            <div  className='leftGravity centre stake_middle'>\n              <span className='stake_token_font'>Filter</span>\n              <div id='stake_toggle_filter' className='stake_toggle'>\n                <div className='stake_toggle_select'>Live</div>\n                <div>Finished</div>\n            </div>\n            <div className='centre stake_sort' style={{marginLeft:'auto'}}>\n                <div onClick={onSortType} className='center'><span id='stake_sort_type' className='fas fa-arrow-down'></span></div>\n                <select onInput={onSortBy} id='stake_sort_by'>\n                    <option value='mine'>Your stake</option>\n                    <option value='earned'>Reward earned</option>\n                    <option value='total'>Total staked</option>\n                    <option value='create' selected>Created</option>\n                </select>\n            </div>\n              <div id='stake_toggle_filter_1' className='stake_toggle' style={{marginLeft:'15px'}}>\n                 <div>Staked</div>\n                 <div className='stake_toggle_select'>All</div>\n              </div>\n            </div>\n            <div className='stake_view' id='stake_view'>\n                <Pool />\n                <MyPool/> \n            </div>\n        </div></div>\n        <ModalInfo />\n        <Create />\n        {init()}\n      </>\n    )\n}\n\n  export default Stake;\n"],"sourceRoot":""}